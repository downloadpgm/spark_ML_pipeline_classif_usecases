---- Exploratory Data Analysis --------------

import org.apache.spark.sql.types._

val schemaAnswer = new StructType().
add("row", DoubleType).
add("id", DoubleType).
add("gender", StringType).
add("cust_type", StringType).
add("age", DoubleType).
add("travel_type", StringType).
add("class", StringType).
add("flight_distance", DoubleType).
add("inflight_wifi", DoubleType).
add("deprt_arrv_time_conv", DoubleType).
add("ease_online_booking", DoubleType).
add("gate_location", DoubleType).
add("food_and_drink", DoubleType).
add("online_boarding", DoubleType).
add("seat_comfort", DoubleType).
add("inflight_entertain", DoubleType).
add("onboard_service", DoubleType).
add("legroom_service", DoubleType).
add("baggage_handling", DoubleType).
add("checkin_service", DoubleType).
add("inflight_service", DoubleType).
add("cleanliness", DoubleType).
add("deprt_delay_minutes", DoubleType).
add("arrv_delay_minutes", DoubleType).
add("satisfaction", StringType)

val df = spark.read.format("csv").option("header","true").schema(schemaAnswer).load("airline/airline_satisfaction_train.csv")

df.printSchema
root
 |-- row: double (nullable = true)
 |-- id: double (nullable = true)
 |-- gender: string (nullable = true)
 |-- cust_type: string (nullable = true)
 |-- age: double (nullable = true)
 |-- travel_type: string (nullable = true)
 |-- class: string (nullable = true)
 |-- flight_distance: double (nullable = true)
 |-- inflight_wifi: double (nullable = true)
 |-- deprt_arrv_time_conv: double (nullable = true)
 |-- ease_online_booking: double (nullable = true)
 |-- gate_location: double (nullable = true)
 |-- food_and_drink: double (nullable = true)
 |-- online_boarding: double (nullable = true)
 |-- seat_comfort: double (nullable = true)
 |-- inflight_entertain: double (nullable = true)
 |-- onboard_service: double (nullable = true)
 |-- legroom_service: double (nullable = true)
 |-- baggage_handling: double (nullable = true)
 |-- checkin_service: double (nullable = true)
 |-- inflight_service: double (nullable = true)
 |-- cleanliness: double (nullable = true)
 |-- deprt_delay_minutes: double (nullable = true)
 |-- arrv_delay_minutes: double (nullable = true)
 |-- satisfaction: string (nullable = true)
 

val df1 = df.drop("row","id").na.fill(0, Seq("arrv_delay_minutes"))

df1.show(10)
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+
|gender|        cust_type| age|    travel_type|   class|flight_distance|inflight_wifi|deprt_arrv_time_conv|ease_online_booking|gate_location|food_and_drink|online_boarding|seat_comfort|inflight_entertain|onboard_service|legroom_service|baggage_handling|checkin_service|inflight_service|cleanliness|deprt_delay_minutes|arrv_delay_minutes|        satisfaction|
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+
|  Male|   Loyal Customer|13.0|Personal Travel|Eco Plus|          460.0|          3.0|                 4.0|                3.0|          1.0|           5.0|            3.0|         5.0|               5.0|            4.0|            3.0|             4.0|            4.0|             5.0|        5.0|               25.0|              18.0|neutral or dissat...|
|  Male|disloyal Customer|25.0|Business travel|Business|          235.0|          3.0|                 2.0|                3.0|          3.0|           1.0|            3.0|         1.0|               1.0|            1.0|            5.0|             3.0|            1.0|             4.0|        1.0|                1.0|               6.0|neutral or dissat...|
|Female|   Loyal Customer|26.0|Business travel|Business|         1142.0|          2.0|                 2.0|                2.0|          2.0|           5.0|            5.0|         5.0|               5.0|            4.0|            3.0|             4.0|            4.0|             4.0|        5.0|                0.0|               0.0|           satisfied|
|Female|   Loyal Customer|25.0|Business travel|Business|          562.0|          2.0|                 5.0|                5.0|          5.0|           2.0|            2.0|         2.0|               2.0|            2.0|            5.0|             3.0|            1.0|             4.0|        2.0|               11.0|               9.0|neutral or dissat...|
|  Male|   Loyal Customer|61.0|Business travel|Business|          214.0|          3.0|                 3.0|                3.0|          3.0|           4.0|            5.0|         5.0|               3.0|            3.0|            4.0|             4.0|            3.0|             3.0|        3.0|                0.0|               0.0|           satisfied|
|Female|   Loyal Customer|26.0|Personal Travel|     Eco|         1180.0|          3.0|                 4.0|                2.0|          1.0|           1.0|            2.0|         1.0|               1.0|            3.0|            4.0|             4.0|            4.0|             4.0|        1.0|                0.0|               0.0|neutral or dissat...|
|  Male|   Loyal Customer|47.0|Personal Travel|     Eco|         1276.0|          2.0|                 4.0|                2.0|          3.0|           2.0|            2.0|         2.0|               2.0|            3.0|            3.0|             4.0|            3.0|             5.0|        2.0|                9.0|              23.0|neutral or dissat...|
|Female|   Loyal Customer|52.0|Business travel|Business|         2035.0|          4.0|                 3.0|                4.0|          4.0|           5.0|            5.0|         5.0|               5.0|            5.0|            5.0|             5.0|            4.0|             5.0|        4.0|                4.0|               0.0|           satisfied|
|Female|   Loyal Customer|41.0|Business travel|Business|          853.0|          1.0|                 2.0|                2.0|          2.0|           4.0|            3.0|         3.0|               1.0|            1.0|            2.0|             1.0|            4.0|             1.0|        2.0|                0.0|               0.0|neutral or dissat...|
|  Male|disloyal Customer|20.0|Business travel|     Eco|         1061.0|          3.0|                 3.0|                3.0|          4.0|           2.0|            3.0|         3.0|               2.0|            2.0|            3.0|             4.0|            4.0|             3.0|        2.0|                0.0|               0.0|neutral or dissat...|
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+
only showing top 10 rows


df1.describe().show
+-------+------+-----------------+------------------+---------------+--------+------------------+------------------+--------------------+-------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+
|summary|gender|        cust_type|               age|    travel_type|   class|   flight_distance|     inflight_wifi|deprt_arrv_time_conv|ease_online_booking|     gate_location|    food_and_drink|  online_boarding|      seat_comfort|inflight_entertain|   onboard_service|   legroom_service|  baggage_handling|   checkin_service|  inflight_service|       cleanliness|deprt_delay_minutes|arrv_delay_minutes|        satisfaction|
+-------+------+-----------------+------------------+---------------+--------+------------------+------------------+--------------------+-------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+
|  count|103904|           103904|            103904|         103904|  103904|            103904|            103904|              103904|             103904|            103904|            103904|           103904|            103904|            103904|            103904|            103904|            103904|            103904|            103904|            103904|             103904|            103904|              103904|
|   mean|  null|             null|39.379706267323684|           null|    null|1189.4483754234677|  2.72968316907915|    3.06029604250077| 2.7569006005543577|2.9768825069294733|3.2021288882044963|3.250375346473668|3.4393959809054513| 3.358157530027718| 3.382362565445026|3.3510548198336925|3.6318332306744687| 3.304290498922082|3.6404277024946103|3.2863508623344626| 14.815618263012011|15.133392362180475|                null|
| stddev|  null|             null|15.114963699737896|           null|    null| 997.1472805289565|1.3278294712362229|  1.5250751972834864|  1.398929472659151|1.2776210103002335| 1.329532710858201|1.349508953713335|1.3190875186173359| 1.332990714627123|1.2883543609017745| 1.315604619325567| 1.180903411075977|1.2653958269270715|1.1756630338758984|1.3122728470665397| 38.230900584141814| 38.64977613202412|                null|
|    min|Female|   Loyal Customer|               7.0|Business travel|Business|              31.0|               0.0|                 0.0|                0.0|               0.0|               0.0|              0.0|               0.0|               0.0|               0.0|               0.0|               1.0|               0.0|               0.0|               0.0|                0.0|               0.0|neutral or dissat...|
|    max|  Male|disloyal Customer|              85.0|Personal Travel|Eco Plus|            4983.0|               5.0|                 5.0|                5.0|               5.0|               5.0|              5.0|               5.0|               5.0|               5.0|               5.0|               5.0|               5.0|               5.0|               5.0|             1592.0|            1584.0|           satisfied|
+-------+------+-----------------+------------------+---------------+--------+------------------+------------------+--------------------+-------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+

df1.groupBy('gender).count.show
+------+-----+
|gender|count|
+------+-----+
|Female|52727|
|  Male|51177|
+------+-----+

df1.groupBy('cust_type).count.show
+-----------------+-----+
|        cust_type|count|
+-----------------+-----+
|   Loyal Customer|84923|
|disloyal Customer|18981|
+-----------------+-----+

df1.groupBy('travel_type).count.show
+---------------+-----+
|    travel_type|count|
+---------------+-----+
|Personal Travel|32249|
|Business travel|71655|
+---------------+-----+

df1.groupBy('class).count.show
+--------+-----+
|   class|count|
+--------+-----+
|Eco Plus| 7494|
|Business|49665|
|     Eco|46745|
+--------+-----+

df1.groupBy('satisfaction).count.show
+--------------------+-----+
|        satisfaction|count|
+--------------------+-----+
|neutral or dissat...|58879|
|           satisfied|45025|
+--------------------+-----+

---- Feature extraction & Data Munging --------------

import org.apache.spark.ml.feature.{StringIndexer, VectorAssembler}

val dfInd1 = new StringIndexer().setInputCol("gender").setOutputCol("gender_cat")
val dfInd2 = new StringIndexer().setInputCol("cust_type").setOutputCol("cust_type_cat")
val dfInd3 = new StringIndexer().setInputCol("travel_type").setOutputCol("travel_type_cat")
val dfInd4 = new StringIndexer().setInputCol("class").setOutputCol("class_cat")
val dfInd5 = new StringIndexer().setInputCol("satisfaction").setOutputCol("label")

val va = new VectorAssembler().setOutputCol("features").setInputCols(Array("gender_cat","cust_type_cat","age","travel_type_cat","class_cat","flight_distance","inflight_wifi","deprt_arrv_time_conv","ease_online_booking","gate_location","food_and_drink","online_boarding","seat_comfort","inflight_entertain","onboard_service","legroom_service","baggage_handling","checkin_service","inflight_service","cleanliness","deprt_delay_minutes","arrv_delay_minutes"))

// ----- building the decision tree model

import org.apache.spark.ml.classification.DecisionTreeClassifier
val dt = new DecisionTreeClassifier

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(dfInd1,dfInd2,dfInd3,dfInd4,dfInd5,va,dt))

val Array(trainingData, testData) = df1.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
testData.cache

val model = pipeline.fit(trainingData)

-- collecting feature importance

import org.apache.spark.ml.classification.DecisionTreeClassificationModel

val dtmodel = model.stages.last.asInstanceOf[DecisionTreeClassificationModel]

val featureImp = va.getInputCols.zip(dtmodel.featureImportances.toArray)

val columns = Array("feature", "Importance")
val featureImpDF = spark.createDataFrame(featureImp).toDF(columns: _*)

featureImpDF.orderBy($"Importance".desc).show()
+--------------------+--------------------+
|             feature|          Importance|
+--------------------+--------------------+
|     online_boarding|  0.5091728973037359|
|       inflight_wifi| 0.23214309248919102|
|     travel_type_cat| 0.18481012373911496|
|  inflight_entertain| 0.03921072977784017|
|     checkin_service|0.015591485463358309|
|       cust_type_cat|0.014348621382244613|
|       gate_location|0.004329687323578487|
| ease_online_booking|3.933625209365855E-4|
|          gender_cat|                 0.0|
|           class_cat|                 0.0|
|                 age|                 0.0|
|     flight_distance|                 0.0|
|deprt_arrv_time_conv|                 0.0|
|        seat_comfort|                 0.0|
|     legroom_service|                 0.0|
| deprt_delay_minutes|                 0.0|
|    baggage_handling|                 0.0|
|         cleanliness|                 0.0|
|      food_and_drink|                 0.0|
|     onboard_service|                 0.0|
+--------------------+--------------------+
only showing top 20 rows


-- collecting metric performance

val pred = model.transform(testData)

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator
val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res3: Double = 0.7480785099412681

bceval.setMetricName("areaUnderPR").evaluate(pred)
res4: Double = 0.7962632545218626


val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res5: org.apache.spark.mllib.linalg.Matrix =
16372.0  1695.0
1252.0   11662.0


// ----- DT model hyperparameter tunning

import org.apache.spark.ml.classification.DecisionTreeClassifier

val dt = new DecisionTreeClassifier

import org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}

val paramGrid = new ParamGridBuilder().
addGrid(dt.maxBins, Array(32, 48, 64)).
addGrid(dt.impurity, Array("gini", "entropy")).
addGrid(dt.maxDepth, Array(10,20,30)).build()

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator

val cv = new CrossValidator().
setEstimator(pipeline).
setEvaluator(new BinaryClassificationEvaluator).
setEstimatorParamMaps(paramGrid).
setNumFolds(3)

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(dfInd1,dfInd2,dfInd3,dfInd4,dfInd5,va,cv))
val cvmodel = cv.fit(trainingData)

import org.apache.spark.ml.tuning.CrossValidatorModel
val cvmodel = pipelinemodel.stages.last.asInstanceOf[CrossValidatorModel]

-- CV hyperparameter evaluation

(new BinaryClassificationEvaluator).getMetricName
res10: String = areaUnderROC

cvmodel.getEstimatorParamMaps.zip(cvmodel.avgMetrics)
res17: Array[(org.apache.spark.ml.param.ParamMap, Double)] =
Array(({
        dtc_19fc9149e819-impurity: gini,
        dtc_19fc9149e819-maxBins: 32,
        dtc_19fc9149e819-maxDepth: 10
},0.9545481446496785), ({
        dtc_19fc9149e819-impurity: gini,
        dtc_19fc9149e819-maxBins: 48,
        dtc_19fc9149e819-maxDepth: 10
},0.9542038903405259), ({
        dtc_19fc9149e819-impurity: gini,
        dtc_19fc9149e819-maxBins: 64,
        dtc_19fc9149e819-maxDepth: 10
},0.9540122302612178), ({
        dtc_19fc9149e819-impurity: gini,
        dtc_19fc9149e819-maxBins: 32,
        dtc_19fc9149e819-maxDepth: 20
},0.9619277448598713), ({
        dtc_19fc9149e819-impurity: gini,
        dtc_19fc9149e819-maxBins: 48,
        dtc_19fc9149e819-maxDepth: 20
},0.9619716483231403), ({
        dtc_19fc9149e819-impurity: gini,
        dtc_19fc9149e819-maxBins: 64,
        dtc_19fc9149e819-maxDepth: 20
},0.9623312317143959)...


-- extract best DT model 

import org.apache.spark.ml.PipelineModel
val bestmodel = cvmodel.bestModel.asInstanceOf[PipelineModel]

import org.apache.spark.ml.classification.DecisionTreeClassificationModel
val dtmodel = bestmodel.stages.last.asInstanceOf[DecisionTreeClassificationModel]

dtmodel.getMaxBins
res18: Int = 48

dtmodel.getImpurity
res19: String = entropy

dtmodel.getMaxDepth
res20: Int = 30

-- collecting feature importance

val featureImp = va.getInputCols.zip(dtmodel.featureImportances.toArray)

val columns = Array("feature", "Importance")
val featureImpDF = spark.createDataFrame(featureImp).toDF(columns: _*)

featureImpDF.orderBy($"Importance".desc).show()
+--------------------+--------------------+
|             feature|          Importance|
+--------------------+--------------------+
|     online_boarding|   0.306862728183937|
|       inflight_wifi|  0.1908046471130248|
|     travel_type_cat| 0.12820958270981322|
|  inflight_entertain| 0.04971856270462448|
|           class_cat| 0.04730145873958598|
|       cust_type_cat| 0.04565780576617476|
|                 age| 0.03293992088304784|
|     checkin_service| 0.02706459495897922|
|       gate_location|0.026453664531465013|
|     flight_distance|0.023769702852106903|
|    baggage_handling|0.021952036034053764|
|    inflight_service| 0.01793169916614334|
|        seat_comfort| 0.01700579364456776|
|     legroom_service|0.011384409363721188|
|         cleanliness| 0.00913894566066403|
|     onboard_service|0.008082977812710222|
|  arrv_delay_minutes|0.007425551284860655|
| deprt_delay_minutes|0.006994152550173166|
|deprt_arrv_time_conv|0.006811474762100976|
|      food_and_drink|0.006186748813756...|
+--------------------+--------------------+
only showing top 20 rows


-- collecting metric performance

val pred = bestmodel.transform(testData)

val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res22: Double = 0.9682256381724527

bceval.setMetricName("areaUnderPR").evaluate(pred)
res23: Double = 0.9794702241646432

val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res24: org.apache.spark.mllib.linalg.Matrix =
16774.0  786.0
850.0    12571.0
