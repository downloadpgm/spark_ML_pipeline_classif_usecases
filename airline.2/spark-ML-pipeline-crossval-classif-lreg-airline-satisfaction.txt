import org.apache.spark.sql.types._

val schemaAnswer = new StructType().
add("row", DoubleType).
add("id", DoubleType).
add("gender", StringType).
add("cust_type", StringType).
add("age", DoubleType).
add("travel_type", StringType).
add("class", StringType).
add("flight_distance", DoubleType).
add("inflight_wifi", DoubleType).
add("deprt_arrv_time_conv", DoubleType).
add("ease_online_booking", DoubleType).
add("gate_location", DoubleType).
add("food_and_drink", DoubleType).
add("online_boarding", DoubleType).
add("seat_comfort", DoubleType).
add("inflight_entertain", DoubleType).
add("onboard_service", DoubleType).
add("legroom_service", DoubleType).
add("baggage_handling", DoubleType).
add("checkin_service", DoubleType).
add("inflight_service", DoubleType).
add("cleanliness", DoubleType).
add("deprt_delay_minutes", DoubleType).
add("arrv_delay_minutes", DoubleType).
add("satisfaction", StringType)

val df = spark.read.format("csv").option("header","true").schema(schemaAnswer).load("airline/airline_satisfaction_train.csv")

df.printSchema
root
 |-- row: double (nullable = true)
 |-- id: double (nullable = true)
 |-- gender: string (nullable = true)
 |-- cust_type: string (nullable = true)
 |-- age: double (nullable = true)
 |-- travel_type: string (nullable = true)
 |-- class: string (nullable = true)
 |-- flight_distance: double (nullable = true)
 |-- inflight_wifi: double (nullable = true)
 |-- deprt_arrv_time_conv: double (nullable = true)
 |-- ease_online_booking: double (nullable = true)
 |-- gate_location: double (nullable = true)
 |-- food_and_drink: double (nullable = true)
 |-- online_boarding: double (nullable = true)
 |-- seat_comfort: double (nullable = true)
 |-- inflight_entertain: double (nullable = true)
 |-- onboard_service: double (nullable = true)
 |-- legroom_service: double (nullable = true)
 |-- baggage_handling: double (nullable = true)
 |-- checkin_service: double (nullable = true)
 |-- inflight_service: double (nullable = true)
 |-- cleanliness: double (nullable = true)
 |-- deprt_delay_minutes: double (nullable = true)
 |-- arrv_delay_minutes: double (nullable = true)
 |-- satisfaction: string (nullable = true)
 

val df1 = df.drop("row","id").na.fill(0, Seq("arrv_delay_minutes"))

df1.show(10)
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+
|gender|        cust_type| age|    travel_type|   class|flight_distance|inflight_wifi|deprt_arrv_time_conv|ease_online_booking|gate_location|food_and_drink|online_boarding|seat_comfort|inflight_entertain|onboard_service|legroom_service|baggage_handling|checkin_service|inflight_service|cleanliness|deprt_delay_minutes|arrv_delay_minutes|        satisfaction|
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+
|  Male|   Loyal Customer|13.0|Personal Travel|Eco Plus|          460.0|          3.0|                 4.0|                3.0|          1.0|           5.0|            3.0|         5.0|               5.0|            4.0|            3.0|             4.0|            4.0|             5.0|        5.0|               25.0|              18.0|neutral or dissat...|
|  Male|disloyal Customer|25.0|Business travel|Business|          235.0|          3.0|                 2.0|                3.0|          3.0|           1.0|            3.0|         1.0|               1.0|            1.0|            5.0|             3.0|            1.0|             4.0|        1.0|                1.0|               6.0|neutral or dissat...|
|Female|   Loyal Customer|26.0|Business travel|Business|         1142.0|          2.0|                 2.0|                2.0|          2.0|           5.0|            5.0|         5.0|               5.0|            4.0|            3.0|             4.0|            4.0|             4.0|        5.0|                0.0|               0.0|           satisfied|
|Female|   Loyal Customer|25.0|Business travel|Business|          562.0|          2.0|                 5.0|                5.0|          5.0|           2.0|            2.0|         2.0|               2.0|            2.0|            5.0|             3.0|            1.0|             4.0|        2.0|               11.0|               9.0|neutral or dissat...|
|  Male|   Loyal Customer|61.0|Business travel|Business|          214.0|          3.0|                 3.0|                3.0|          3.0|           4.0|            5.0|         5.0|               3.0|            3.0|            4.0|             4.0|            3.0|             3.0|        3.0|                0.0|               0.0|           satisfied|
|Female|   Loyal Customer|26.0|Personal Travel|     Eco|         1180.0|          3.0|                 4.0|                2.0|          1.0|           1.0|            2.0|         1.0|               1.0|            3.0|            4.0|             4.0|            4.0|             4.0|        1.0|                0.0|               0.0|neutral or dissat...|
|  Male|   Loyal Customer|47.0|Personal Travel|     Eco|         1276.0|          2.0|                 4.0|                2.0|          3.0|           2.0|            2.0|         2.0|               2.0|            3.0|            3.0|             4.0|            3.0|             5.0|        2.0|                9.0|              23.0|neutral or dissat...|
|Female|   Loyal Customer|52.0|Business travel|Business|         2035.0|          4.0|                 3.0|                4.0|          4.0|           5.0|            5.0|         5.0|               5.0|            5.0|            5.0|             5.0|            4.0|             5.0|        4.0|                4.0|               0.0|           satisfied|
|Female|   Loyal Customer|41.0|Business travel|Business|          853.0|          1.0|                 2.0|                2.0|          2.0|           4.0|            3.0|         3.0|               1.0|            1.0|            2.0|             1.0|            4.0|             1.0|        2.0|                0.0|               0.0|neutral or dissat...|
|  Male|disloyal Customer|20.0|Business travel|     Eco|         1061.0|          3.0|                 3.0|                3.0|          4.0|           2.0|            3.0|         3.0|               2.0|            2.0|            3.0|             4.0|            4.0|             3.0|        2.0|                0.0|               0.0|neutral or dissat...|
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+
only showing top 10 rows


df1.describe().show
+-------+------+-----------------+------------------+---------------+--------+------------------+------------------+--------------------+-------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+
|summary|gender|        cust_type|               age|    travel_type|   class|   flight_distance|     inflight_wifi|deprt_arrv_time_conv|ease_online_booking|     gate_location|    food_and_drink|  online_boarding|      seat_comfort|inflight_entertain|   onboard_service|   legroom_service|  baggage_handling|   checkin_service|  inflight_service|       cleanliness|deprt_delay_minutes|arrv_delay_minutes|        satisfaction|
+-------+------+-----------------+------------------+---------------+--------+------------------+------------------+--------------------+-------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+
|  count|103904|           103904|            103904|         103904|  103904|            103904|            103904|              103904|             103904|            103904|            103904|           103904|            103904|            103904|            103904|            103904|            103904|            103904|            103904|            103904|             103904|            103904|              103904|
|   mean|  null|             null|39.379706267323684|           null|    null|1189.4483754234677|  2.72968316907915|    3.06029604250077| 2.7569006005543577|2.9768825069294733|3.2021288882044963|3.250375346473668|3.4393959809054513| 3.358157530027718| 3.382362565445026|3.3510548198336925|3.6318332306744687| 3.304290498922082|3.6404277024946103|3.2863508623344626| 14.815618263012011|15.133392362180475|                null|
| stddev|  null|             null|15.114963699737896|           null|    null| 997.1472805289565|1.3278294712362229|  1.5250751972834864|  1.398929472659151|1.2776210103002335| 1.329532710858201|1.349508953713335|1.3190875186173359| 1.332990714627123|1.2883543609017745| 1.315604619325567| 1.180903411075977|1.2653958269270715|1.1756630338758984|1.3122728470665397| 38.230900584141814| 38.64977613202412|                null|
|    min|Female|   Loyal Customer|               7.0|Business travel|Business|              31.0|               0.0|                 0.0|                0.0|               0.0|               0.0|              0.0|               0.0|               0.0|               0.0|               0.0|               1.0|               0.0|               0.0|               0.0|                0.0|               0.0|neutral or dissat...|
|    max|  Male|disloyal Customer|              85.0|Personal Travel|Eco Plus|            4983.0|               5.0|                 5.0|                5.0|               5.0|               5.0|              5.0|               5.0|               5.0|               5.0|               5.0|               5.0|               5.0|               5.0|               5.0|             1592.0|            1584.0|           satisfied|
+-------+------+-----------------+------------------+---------------+--------+------------------+------------------+--------------------+-------------------+------------------+------------------+-----------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+------------------+-------------------+------------------+--------------------+

df1.groupBy('gender).count.show
+------+-----+
|gender|count|
+------+-----+
|Female|52727|
|  Male|51177|
+------+-----+

df1.groupBy('cust_type).count.show
+-----------------+-----+
|        cust_type|count|
+-----------------+-----+
|   Loyal Customer|84923|
|disloyal Customer|18981|
+-----------------+-----+

df1.groupBy('travel_type).count.show
+---------------+-----+
|    travel_type|count|
+---------------+-----+
|Personal Travel|32249|
|Business travel|71655|
+---------------+-----+

df1.groupBy('class).count.show
+--------+-----+
|   class|count|
+--------+-----+
|Eco Plus| 7494|
|Business|49665|
|     Eco|46745|
+--------+-----+

df1.groupBy('satisfaction).count.show
+--------------------+-----+
|        satisfaction|count|
+--------------------+-----+
|neutral or dissat...|58879|
|           satisfied|45025|
+--------------------+-----+

import org.apache.spark.ml.feature.{StringIndexer, OneHotEncoder, VectorAssembler}

val dfrawIndexer1 = new StringIndexer().setInputCol("gender").setOutputCol("gender_cat")
val dfrawIndexer2 = new StringIndexer().setInputCol("cust_type").setOutputCol("cust_type_cat")
val dfrawIndexer3 = new StringIndexer().setInputCol("travel_type").setOutputCol("travel_type_cat")
val dfrawIndexer4 = new StringIndexer().setInputCol("class").setOutputCol("class_cat")
val dfrawIndexer5 = new StringIndexer().setInputCol("satisfaction").setOutputCol("label")

val dfrawIndexer11 = new OneHotEncoder().setInputCol("gender_cat").setOutputCol("gender_vect")
val dfrawIndexer21 = new OneHotEncoder().setInputCol("cust_type_cat").setOutputCol("cust_type_vect")
val dfrawIndexer31 = new OneHotEncoder().setInputCol("travel_type_cat").setOutputCol("travel_type_vect")
val dfrawIndexer41 = new OneHotEncoder().setInputCol("class_cat").setOutputCol("class_vect")

val va = new VectorAssembler().setOutputCol("features").setInputCols(Array("gender_vect","cust_type_vect","age","travel_type_vect","class_vect","flight_distance","inflight_wifi","deprt_arrv_time_conv","ease_online_booking","gate_location","food_and_drink","online_boarding","seat_comfort","inflight_entertain","onboard_service","legroom_service","baggage_handling","checkin_service","inflight_service","cleanliness","deprt_delay_minutes","arrv_delay_minutes"))

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(dfrawIndexer1,dfrawIndexer2,dfrawIndexer3,dfrawIndexer4,dfrawIndexer5,dfrawIndexer11,dfrawIndexer21,dfrawIndexer31,dfrawIndexer41,va))

val df2 = pipeline.fit(df1).transform(df1)

df2.printSchema
root
 |-- gender: string (nullable = true)
 |-- cust_type: string (nullable = true)
 |-- age: double (nullable = true)
 |-- travel_type: string (nullable = true)
 |-- class: string (nullable = true)
 |-- flight_distance: double (nullable = true)
 |-- inflight_wifi: double (nullable = true)
 |-- deprt_arrv_time_conv: double (nullable = true)
 |-- ease_online_booking: double (nullable = true)
 |-- gate_location: double (nullable = true)
 |-- food_and_drink: double (nullable = true)
 |-- online_boarding: double (nullable = true)
 |-- seat_comfort: double (nullable = true)
 |-- inflight_entertain: double (nullable = true)
 |-- onboard_service: double (nullable = true)
 |-- legroom_service: double (nullable = true)
 |-- baggage_handling: double (nullable = true)
 |-- checkin_service: double (nullable = true)
 |-- inflight_service: double (nullable = true)
 |-- cleanliness: double (nullable = true)
 |-- deprt_delay_minutes: double (nullable = true)
 |-- arrv_delay_minutes: double (nullable = false)
 |-- satisfaction: string (nullable = true)
 |-- gender_cat: double (nullable = false)
 |-- cust_type_cat: double (nullable = false)
 |-- travel_type_cat: double (nullable = false)
 |-- class_cat: double (nullable = false)
 |-- label: double (nullable = false)
 |-- gender_vect: vector (nullable = true)
 |-- cust_type_vect: vector (nullable = true)
 |-- travel_type_vect: vector (nullable = true)
 |-- class_vect: vector (nullable = true)
 |-- features: vector (nullable = true)

df2.show(10)
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+----------+-------------+---------------+---------+-----+-------------+--------------+----------------+-------------+--------------------+
|gender|        cust_type| age|    travel_type|   class|flight_distance|inflight_wifi|deprt_arrv_time_conv|ease_online_booking|gate_location|food_and_drink|online_boarding|seat_comfort|inflight_entertain|onboard_service|legroom_service|baggage_handling|checkin_service|inflight_service|cleanliness|deprt_delay_minutes|arrv_delay_minutes|        satisfaction|gender_cat|cust_type_cat|travel_type_cat|class_cat|label|  gender_vect|cust_type_vect|travel_type_vect|   class_vect|            features|
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+----------+-------------+---------------+---------+-----+-------------+--------------+----------------+-------------+--------------------+
|  Male|   Loyal Customer|13.0|Personal Travel|Eco Plus|          460.0|          3.0|                 4.0|                3.0|          1.0|           5.0|            3.0|         5.0|               5.0|            4.0|            3.0|             4.0|            4.0|             5.0|        5.0|               25.0|              18.0|neutral or dissat...|       1.0|          0.0|            1.0|      2.0|  0.0|    (1,[],[])| (1,[0],[1.0])|       (1,[],[])|    (2,[],[])|[0.0,1.0,13.0,0.0...|
|  Male|disloyal Customer|25.0|Business travel|Business|          235.0|          3.0|                 2.0|                3.0|          3.0|           1.0|            3.0|         1.0|               1.0|            1.0|            5.0|             3.0|            1.0|             4.0|        1.0|                1.0|               6.0|neutral or dissat...|       1.0|          1.0|            0.0|      0.0|  0.0|    (1,[],[])|     (1,[],[])|   (1,[0],[1.0])|(2,[0],[1.0])|[0.0,0.0,25.0,1.0...|
|Female|   Loyal Customer|26.0|Business travel|Business|         1142.0|          2.0|                 2.0|                2.0|          2.0|           5.0|            5.0|         5.0|               5.0|            4.0|            3.0|             4.0|            4.0|             4.0|        5.0|                0.0|               0.0|           satisfied|       0.0|          0.0|            0.0|      0.0|  1.0|(1,[0],[1.0])| (1,[0],[1.0])|   (1,[0],[1.0])|(2,[0],[1.0])|[1.0,1.0,26.0,1.0...|
|Female|   Loyal Customer|25.0|Business travel|Business|          562.0|          2.0|                 5.0|                5.0|          5.0|           2.0|            2.0|         2.0|               2.0|            2.0|            5.0|             3.0|            1.0|             4.0|        2.0|               11.0|               9.0|neutral or dissat...|       0.0|          0.0|            0.0|      0.0|  0.0|(1,[0],[1.0])| (1,[0],[1.0])|   (1,[0],[1.0])|(2,[0],[1.0])|[1.0,1.0,25.0,1.0...|
|  Male|   Loyal Customer|61.0|Business travel|Business|          214.0|          3.0|                 3.0|                3.0|          3.0|           4.0|            5.0|         5.0|               3.0|            3.0|            4.0|             4.0|            3.0|             3.0|        3.0|                0.0|               0.0|           satisfied|       1.0|          0.0|            0.0|      0.0|  1.0|    (1,[],[])| (1,[0],[1.0])|   (1,[0],[1.0])|(2,[0],[1.0])|[0.0,1.0,61.0,1.0...|
|Female|   Loyal Customer|26.0|Personal Travel|     Eco|         1180.0|          3.0|                 4.0|                2.0|          1.0|           1.0|            2.0|         1.0|               1.0|            3.0|            4.0|             4.0|            4.0|             4.0|        1.0|                0.0|               0.0|neutral or dissat...|       0.0|          0.0|            1.0|      1.0|  0.0|(1,[0],[1.0])| (1,[0],[1.0])|       (1,[],[])|(2,[1],[1.0])|[1.0,1.0,26.0,0.0...|
|  Male|   Loyal Customer|47.0|Personal Travel|     Eco|         1276.0|          2.0|                 4.0|                2.0|          3.0|           2.0|            2.0|         2.0|               2.0|            3.0|            3.0|             4.0|            3.0|             5.0|        2.0|                9.0|              23.0|neutral or dissat...|       1.0|          0.0|            1.0|      1.0|  0.0|    (1,[],[])| (1,[0],[1.0])|       (1,[],[])|(2,[1],[1.0])|[0.0,1.0,47.0,0.0...|
|Female|   Loyal Customer|52.0|Business travel|Business|         2035.0|          4.0|                 3.0|                4.0|          4.0|           5.0|            5.0|         5.0|               5.0|            5.0|            5.0|             5.0|            4.0|             5.0|        4.0|                4.0|               0.0|           satisfied|       0.0|          0.0|            0.0|      0.0|  1.0|(1,[0],[1.0])| (1,[0],[1.0])|   (1,[0],[1.0])|(2,[0],[1.0])|[1.0,1.0,52.0,1.0...|
|Female|   Loyal Customer|41.0|Business travel|Business|          853.0|          1.0|                 2.0|                2.0|          2.0|           4.0|            3.0|         3.0|               1.0|            1.0|            2.0|             1.0|            4.0|             1.0|        2.0|                0.0|               0.0|neutral or dissat...|       0.0|          0.0|            0.0|      0.0|  0.0|(1,[0],[1.0])| (1,[0],[1.0])|   (1,[0],[1.0])|(2,[0],[1.0])|[1.0,1.0,41.0,1.0...|
|  Male|disloyal Customer|20.0|Business travel|     Eco|         1061.0|          3.0|                 3.0|                3.0|          4.0|           2.0|            3.0|         3.0|               2.0|            2.0|            3.0|             4.0|            4.0|             3.0|        2.0|                0.0|               0.0|neutral or dissat...|       1.0|          1.0|            0.0|      1.0|  0.0|    (1,[],[])|     (1,[],[])|   (1,[0],[1.0])|(2,[1],[1.0])|[0.0,0.0,20.0,1.0...|
+------+-----------------+----+---------------+--------+---------------+-------------+--------------------+-------------------+-------------+--------------+---------------+------------+------------------+---------------+---------------+----------------+---------------+----------------+-----------+-------------------+------------------+--------------------+----------+-------------+---------------+---------+-----+-------------+--------------+----------------+-------------+--------------------+
only showing top 10 rows

// calculate pearson correlation to check multicolinearity

import org.apache.spark.ml.stat.Correlation
import org.apache.spark.ml.linalg.Matrix
import org.apache.spark.sql.Row

val corr = Correlation.corr(df2, "features", "pearson").head match {
   case Row(coeff: Matrix) => coeff
}
corr: org.apache.spark.ml.linalg.Matrix =
1.0                     -0.0317317465529099    ... (25 total)
-0.0317317465529099     1.0                    ...
-0.008927810282423804   0.28167393898137355    ...
0.006908874872918234    -0.308333220763768     ...
-0.010634439669487726   0.08560067091142325    ...
0.00529511251789055     -0.11869373371437304   ...
-0.010634439669487726   0.08560067091142325    ...
0.00529511251789055     -0.11869373371437304   ...
-0.005827556319261514   0.22520036519418768    ...
-0.008974280065802009   0.007542914458065942   ...
-0.009141828286325034   0.20686858177132855    ...
-0.006950690425877697   0.019509122350080538   ...
-3.3275356479646955E-4  -0.0060784715235066    ...
-0.005772191977188069   0.05945442663823566    ...
0.042259537592161       0.1892...


corr.toDense.rowIter.foreach( x => println(x.toString))
[1.0,-0.0317317465529099,-0.008927810282423804,0.006908874872918234,-0.010634439669487726,0.00529511251789055,-0.010634439669487726,0.00529511251789055,-0.005827556319261514,-0.008974280065802009,-0.009141828286325034,-0.006950690425877697,-3.3275356479646955E-4,-0.005772191977188069,0.042259537592161,0.026502250505187088,-0.006117139072192504,-0.008155883302996707,-0.03179771927763593,-0.03739080771159263,-0.010562935729749695,-0.03941041110720388,-0.006504908030174157,-0.0029346811517149403,-3.473522207807558E-4]
[-0.0317317465529099,1.0,0.28167393898137355,-0.308333220763768,0.08560067091142325,-0.11869373371437304,0.08560067091142325,-0.11869373371437304,0.22520036519418768,0.007542914458065942,0.20686858177132855,0.019509122350080538,-0.0060784715235066,0.05945442663823566,0.18926193819352272,0.15948371804011666,0.10992981311521842,0.056560473702386926,0.04786801121321799,-0.024723353818010992,0.032177450508212746,-0.02266980336756741,0.0836130190070583,-0.004035888130741376,-0.004814667062769614]
[-0.008927810282423804,0.28167393898137355,1.0,0.04852446731728539,0.13893895862966774,-0.13255095864709,0.13893895862966774,-0.13255095864709,0.09946084164548072,0.01785932092027685,0.03812515171921731,0.024842002786235242,-0.001329657294352336,0.023000477347210793,0.20893929603061218,0.16027673775071163,0.07644448708276015,0.057594474596698794,0.04058276402554354,-0.04752930821532361,0.03548237585212122,-0.04942722005203589,0.053610550726070995,-0.010152230154242497,-0.012104789905204064]
[0.006908874872918234,-0.308333220763768,0.04852446731728539,1.0,0.5521248107068212,-0.5009377540167701,0.5521248107068212,-0.5009377540167701,0.2673436065477664,0.10508542665422893,-0.2597625389784988,0.13351141543662262,0.03070022172204582,0.06343867731451398,0.22480314237812857,0.12439945093796735,0.14819872140820212,0.05654289057144206,0.1388030972297108,0.031320999700182706,-0.016751013726283487,0.022598560234079586,0.07920725811764595,0.005432024836718484,0.005866662115232124]
[-0.010634439669487726,0.08560067091142325,0.13893895862966774,0.5521248107068212,1.0,-0.8653556905567565,0.9999999999999999,-0.8653556905567565,0.46689636619672065,0.03288465817499702,-0.09687002031461527,0.10743589786387511,0.004526148728099479,0.0871140394186134,0.33054897150280377,0.23319927080721534,0.1990502551341256,0.2206750655742161,0.21343729455715388,0.17103789755160767,0.16250144708340175,0.16616519728119386,0.13945902765847396,-0.010451212899647767,-0.014727951335086984]
[0.00529511251789055,-0.11869373371437304,-0.13255095864709,-0.5009377540167701,-0.8653556905567565,1.0,-0.8653556905567565,1.0000000000000002,-0.4044932807792463,-0.037196961728809506,0.08232080306524224,-0.0980394507333573,-0.0034883602326792073,-0.07880121673210612,-0.2931031194148235,-0.20605419829851052,-0.17632270533511418,-0.18391013569828904,-0.18238770809703067,-0.13882527843571948,-0.13027449256158108,-0.13577037663143116,-0.12284058273448929,0.008158203714215273,0.011414269800651258]
[-0.010634439669487726,0.08560067091142325,0.13893895862966774,0.5521248107068212,0.9999999999999999,-0.8653556905567565,1.0,-0.8653556905567565,0.46689636619672065,0.03288465817499702,-0.09687002031461527,0.10743589786387511,0.004526148728099479,0.0871140394186134,0.33054897150280377,0.23319927080721534,0.1990502551341256,0.2206750655742161,0.21343729455715388,0.17103789755160767,0.16250144708340175,0.16616519728119386,0.13945902765847396,-0.010451212899647767,-0.014727951335086984]
[0.00529511251789055,-0.11869373371437304,-0.13255095864709,-0.5009377540167701,-0.8653556905567565,1.0000000000000002,-0.8653556905567565,1.0,-0.4044932807792463,-0.037196961728809506,0.08232080306524224,-0.0980394507333573,-0.0034883602326792073,-0.07880121673210612,-0.2931031194148235,-0.20605419829851052,-0.17632270533511418,-0.18391013569828904,-0.18238770809703067,-0.13882527843571948,-0.13027449256158108,-0.13577037663143116,-0.12284058273448929,0.008158203714215273,0.011414269800651258]
[-0.005827556319261514,0.22520036519418768,0.09946084164548072,0.2673436065477664,0.46689636619672065,-0.4044932807792463,0.46689636619672065,-0.4044932807792463,1.0,0.007131199035033349,-0.02004291647461111,0.06571656593296903,0.004793232484283753,0.05699353130654941,0.21486909340489446,0.15733252224060107,0.1287403252281961,0.10952642094146552,0.13391560158330176,0.06318413011188477,0.07307176819694272,0.057539795188931035,0.09314859748476588,0.0021580114615571393,-0.002470365471609902]
[-0.008974280065802009,0.007542914458065942,0.01785932092027685,0.10508542665422893,0.03288465817499702,-0.037196961728809506,0.03288465817499702,-0.037196961728809506,0.007131199035033349,1.0,0.34384450591703697,0.7158561412674372,0.3362484457929424,0.1347175928066788,0.45697023916801266,0.1226578164010638,0.20932121443518775,0.12149991931548815,0.160472685045922,0.1209233347274448,0.04319261838351173,0.11044139165135171,0.13269791609365425,-0.017402211431109826,-0.019042205892721934]
[-0.009141828286325034,0.20686858177132855,0.03812515171921731,-0.2597625389784988,-0.09687002031461527,0.08232080306524224,-0.09687002031461527,0.08232080306524224,-0.02004291647461111,0.34384450591703697,1.0,0.4369611542465404,0.44475713903346653,0.004906371119056436,0.07011871229118757,0.011344159718713387,-0.004861423623995213,0.0688823274397686,0.012441284477955573,0.07212561381396489,0.09333300968362461,0.07331752705139,0.014292462071855392,0.0010051315647502683,-9.180764083388461E-4]
[-0.006950690425877697,0.019509122350080538,0.024842002786235242,0.13351141543662262,0.10743589786387511,-0.0980394507333573,0.10743589786387511,-0.0980394507333573,0.06571656593296903,0.7158561412674372,0.4369611542465404,1.0,0.45865546608956353,0.031873350166365166,0.40407421217793243,0.030014105353196957,0.04703228639950028,0.038832948505816665,0.10760138298953564,0.03876236641863456,0.01108076086205562,0.035272400130187224,0.016178525053313495,-0.006370606109402182,-0.00794655698311616]
[-3.3275356479646955E-4,-0.0060784715235066,-0.001329657294352336,0.03070022172204582,0.004526148728099479,-0.0034883602326792073,0.004526148728099479,-0.0034883602326792073,0.004793232484283753,0.3362484457929424,0.44475713903346653,0.45865546608956353,1.0,-0.0011586047174033526,0.0016880222100116135,0.003668778504158922,0.003516726769808142,-0.02837304245636468,-0.005873445111592557,0.0023134453435085843,-0.03542748282780502,0.001680728058831619,-0.0038299415630770562,0.005467106350303011,0.005178314511770476]
[-0.005772191977188069,0.05945442663823566,0.023000477347210793,0.06343867731451398,0.0871140394186134,-0.07880121673210612,0.0871140394186134,-0.07880121673210612,0.05699353130654941,0.1347175928066788,0.004906371119056436,0.031873350166365166,-0.0011586047174033526,1.0,0.23446825550351982,0.5745564522785755,0.6225120323639814,0.05907311712821847,0.032497632590470844,0.03474614467812247,0.08729900659006064,0.03399281356064131,0.6577597343070456,-0.029926215501101715,-0.03246597647604082]
[0.042259537592161,0.18926193819352272,0.20893929603061218,0.22480314237812857,0.33054897150280377,-0.2931031194148235,0.33054897150280377,-0.2931031194148235,0.21486909340489446,0.45697023916801266,0.07011871229118757,0.40407421217793243,0.0016880222100116135,0.23446825550351982,1.0,0.4202107259656614,0.28506619616932993,0.15544289374133063,0.12395036926902622,0.08328016469479609,0.20446156302365698,0.07457286303046667,0.331517135065505,-0.018982416393191433,-0.02187424851648029]
[0.026502250505187088,0.15948371804011666,0.16027673775071163,0.12439945093796735,0.23319927080721534,-0.20605419829851052,0.23319927080721534,-0.20605419829851052,0.15733252224060107,0.1226578164010638,0.011344159718713387,0.030014105353196957,0.003668778504158922,0.5745564522785755,0.4202107259656614,1.0,0.61059012556249,0.13197121755566174,0.10555861232440354,0.07454161380221404,0.19185446936136852,0.06921779828336513,0.6785339135418835,-0.02789792386329035,-0.029734801462501733]
[-0.006117139072192504,0.10992981311521842,0.07644448708276015,0.14819872140820212,0.1990502551341256,-0.17632270533511418,0.1990502551341256,-0.17632270533511418,0.1287403252281961,0.20932121443518775,-0.004861423623995213,0.04703228639950028,0.003516726769808142,0.6225120323639814,0.28506619616932993,0.61059012556249,1.0,0.42015270128863363,0.2996915132150426,0.3782100045444806,0.12086723617266472,0.404855181547649,0.6918146374078832,-0.0274887918190985,-0.030596898243101394]
[-0.008155883302996707,0.056560473702386926,0.057594474596698794,0.05654289057144206,0.2206750655742161,-0.18391013569828904,0.2206750655742161,-0.18391013569828904,0.10952642094146552,0.12149991931548815,0.0688823274397686,0.038832948505816665,-0.02837304245636468,0.05907311712821847,0.15544289374133063,0.13197121755566174,0.42015270128863363,1.0,0.35549515824749733,0.5191341941120453,0.24391432699435722,0.5507821723190144,0.1232200545211859,-0.03156916895169128,-0.0350893396094094]
[-0.03179771927763593,0.04786801121321799,0.04058276402554354,0.1388030972297108,0.21343729455715388,-0.18238770809703067,0.21343729455715388,-0.18238770809703067,0.13391560158330176,0.160472685045922,0.012441284477955573,0.10760138298953564,-0.005873445111592557,0.032497632590470844,0.12395036926902622,0.10555861232440354,0.2996915132150426,0.35549515824749733,1.0,0.3695440920840138,0.15313722255904988,0.36865567921053305,0.09637040167755946,0.014362562225716746,0.01192400171186687]
[-0.03739080771159263,-0.024723353818010992,-0.04752930821532361,0.031320999700182706,0.17103789755160767,-0.13882527843571948,0.17103789755160767,-0.13882527843571948,0.06318413011188477,0.1209233347274448,0.07212561381396489,0.03876236641863456,0.0023134453435085843,0.03474614467812247,0.08328016469479609,0.07454161380221404,0.3782100045444806,0.5191341941120453,0.3695440920840138,1.0,0.23312221633050734,0.6285610871326162,0.09579266700741097,-0.00557319271899724,-0.00857646479169114]
[-0.010562935729749695,0.032177450508212746,0.03548237585212122,-0.016751013726283487,0.16250144708340175,-0.13027449256158108,0.16250144708340175,-0.13027449256158108,0.07307176819694272,0.04319261838351173,0.09333300968362461,0.01108076086205562,-0.03542748282780502,0.08729900659006064,0.20446156302365698,0.19185446936136852,0.12086723617266472,0.24391432699435722,0.15313722255904988,0.23312221633050734,1.0,0.2371972074235158,0.17958294553555362,-0.018452937852898723,-0.020324352675331284]
[-0.03941041110720388,-0.02266980336756741,-0.04942722005203589,0.022598560234079586,0.16616519728119386,-0.13577037663143116,0.16616519728119386,-0.13577037663143116,0.057539795188931035,0.11044139165135171,0.07331752705139,0.035272400130187224,0.001680728058831619,0.03399281356064131,0.07457286303046667,0.06921779828336513,0.404855181547649,0.5507821723190144,0.36865567921053305,0.6285610871326162,0.2371972074235158,1.0,0.08877918343395927,-0.054812552087219454,-0.05897987364199829]
[-0.006504908030174157,0.0836130190070583,0.053610550726070995,0.07920725811764595,0.13945902765847396,-0.12284058273448929,0.13945902765847396,-0.12284058273448929,0.09314859748476588,0.13269791609365425,0.014292462071855392,0.016178525053313495,-0.0038299415630770562,0.6577597343070456,0.331517135065505,0.6785339135418835,0.6918146374078832,0.1232200545211859,0.09637040167755946,0.09579266700741097,0.17958294553555362,0.08877918343395927,1.0,-0.014092583302413076,-0.01573187849861507]
[-0.0029346811517149403,-0.004035888130741376,-0.010152230154242497,0.005432024836718484,-0.010451212899647767,0.008158203714215273,-0.010451212899647767,0.008158203714215273,0.0021580114615571393,-0.017402211431109826,0.0010051315647502683,-0.006370606109402182,0.005467106350303011,-0.029926215501101715,-0.018982416393191433,-0.02789792386329035,-0.0274887918190985,-0.03156916895169128,0.014362562225716746,-0.00557319271899724,-0.018452937852898723,-0.054812552087219454,-0.014092583302413076,1.0,0.96024709866428]
[-3.473522207807558E-4,-0.004814667062769614,-0.012104789905204064,0.005866662115232124,-0.014727951335086984,0.011414269800651258,-0.014727951335086984,0.011414269800651258,-0.002470365471609902,-0.019042205892721934,-9.180764083388461E-4,-0.00794655698311616,0.005178314511770476,-0.03246597647604082,-0.02187424851648029,-0.029734801462501733,-0.030596898243101394,-0.0350893396094094,0.01192400171186687,-0.00857646479169114,-0.020324352675331284,-0.05897987364199829,-0.01573187849861507,0.96024709866428,1.0]

corr.toDense.rowIter.foreach( x => {
  val size = x.size
  for ( i <- Range(0,size)) { 
    val elem = x(i)
    print(f"$elem%.3f\t") 
  }
  println
})
// "gender_vect","cust_type_vect","age","travel_type_vect","class_vect","class_vect","flight_distance","inflight_wifi","deprt_arrv_time_conv","ease_online_booking","gate_location","food_and_drink","online_boarding","seat_comfort","inflight_entertain","onboard_service","legroom_service","baggage_handling","checkin_service","inflight_service","cleanliness","deprt_delay_minutes","arrv_delay_minutes"
1.000   -0.032  -0.009  0.007   -0.011  0.005   -0.011  0.005   -0.006  -0.009  -0.009-0.007  -0.000  -0.006  0.042   0.027   -0.006  -0.008  -0.032  -0.037  -0.011  -0.039-0.007  -0.003  -0.000
-0.032  1.000   0.282   -0.308  0.086   -0.119  0.086   -0.119  0.225   0.008   0.2070.020    -0.006  0.059   0.189   0.159   0.110   0.057   0.048   -0.025  0.032   -0.0230.084   -0.004  -0.005
-0.009  0.282   1.000   0.049   0.139   -0.133  0.139   -0.133  0.099   0.018   0.0380.025    -0.001  0.023   0.209   0.160   0.076   0.058   0.041   -0.048  0.035   -0.0490.054   -0.010  -0.012
0.007   -0.308  0.049   1.000   0.552   -0.501  0.552   -0.501  0.267   0.105   -0.2600.134   0.031   0.063   0.225   0.124   0.148   0.057   0.139   0.031   -0.017  0.0230.079    0.005   0.006
-0.011  0.086   0.139   0.552   1.000   -0.865  1.000   -0.865  0.467   0.033   -0.0970.107   0.005   0.087   0.331   0.233   0.199   0.221   0.213   0.171   0.163   0.1660.139    -0.010  -0.015
0.005   -0.119  -0.133  -0.501  -0.865  1.000   -0.865  1.000   -0.404  -0.037  0.082-0.098   -0.003  -0.079  -0.293  -0.206  -0.176  -0.184  -0.182  -0.139  -0.130  -0.136-0.123  0.008   0.011
-0.011  0.086   0.139   0.552   1.000   -0.865  1.000   -0.865  0.467   0.033   -0.0970.107   0.005   0.087   0.331   0.233   0.199   0.221   0.213   0.171   0.163   0.1660.139    -0.010  -0.015
0.005   -0.119  -0.133  -0.501  -0.865  1.000   -0.865  1.000   -0.404  -0.037  0.082-0.098   -0.003  -0.079  -0.293  -0.206  -0.176  -0.184  -0.182  -0.139  -0.130  -0.136-0.123  0.008   0.011
-0.006  0.225   0.099   0.267   0.467   -0.404  0.467   -0.404  1.000   0.007   -0.0200.066   0.005   0.057   0.215   0.157   0.129   0.110   0.134   0.063   0.073   0.0580.093    0.002   -0.002
-0.009  0.008   0.018   0.105   0.033   -0.037  0.033   -0.037  0.007   1.000   0.3440.716    0.336   0.135   0.457   0.123   0.209   0.121   0.160   0.121   0.043   0.1100.133    -0.017  -0.019
-0.009  0.207   0.038   -0.260  -0.097  0.082   -0.097  0.082   -0.020  0.344   1.0000.437    0.445   0.005   0.070   0.011   -0.005  0.069   0.012   0.072   0.093   0.0730.014    0.001   -0.001
-0.007  0.020   0.025   0.134   0.107   -0.098  0.107   -0.098  0.066   0.716   0.4371.000    0.459   0.032   0.404   0.030   0.047   0.039   0.108   0.039   0.011   0.0350.016    -0.006  -0.008
-0.000  -0.006  -0.001  0.031   0.005   -0.003  0.005   -0.003  0.005   0.336   0.4450.459    1.000   -0.001  0.002   0.004   0.004   -0.028  -0.006  0.002   -0.035  0.002-0.004   0.005   0.005
-0.006  0.059   0.023   0.063   0.087   -0.079  0.087   -0.079  0.057   0.135   0.0050.032    -0.001  1.000   0.234   0.575   0.623   0.059   0.032   0.035   0.087   0.0340.658    -0.030  -0.032
0.042   0.189   0.209   0.225   0.331   -0.293  0.331   -0.293  0.215   0.457   0.0700.404    0.002   0.234   1.000   0.420   0.285   0.155   0.124   0.083   0.204   0.0750.332    -0.019  -0.022
0.027   0.159   0.160   0.124   0.233   -0.206  0.233   -0.206  0.157   0.123   0.0110.030    0.004   0.575   0.420   1.000   0.611   0.132   0.106   0.075   0.192   0.0690.679    -0.028  -0.030
-0.006  0.110   0.076   0.148   0.199   -0.176  0.199   -0.176  0.129   0.209   -0.0050.047   0.004   0.623   0.285   0.611   1.000   0.420   0.300   0.378   0.121   0.4050.692    -0.027  -0.031
-0.008  0.057   0.058   0.057   0.221   -0.184  0.221   -0.184  0.110   0.121   0.0690.039    -0.028  0.059   0.155   0.132   0.420   1.000   0.355   0.519   0.244   0.5510.123    -0.032  -0.035
-0.032  0.048   0.041   0.139   0.213   -0.182  0.213   -0.182  0.134   0.160   0.0120.108    -0.006  0.032   0.124   0.106   0.300   0.355   1.000   0.370   0.153   0.3690.096    0.014   0.012
-0.037  -0.025  -0.048  0.031   0.171   -0.139  0.171   -0.139  0.063   0.121   0.0720.039    0.002   0.035   0.083   0.075   0.378   0.519   0.370   1.000   0.233   0.6290.096    -0.006  -0.009
-0.011  0.032   0.035   -0.017  0.163   -0.130  0.163   -0.130  0.073   0.043   0.0930.011    -0.035  0.087   0.204   0.192   0.121   0.244   0.153   0.233   1.000   0.2370.180    -0.018  -0.020
-0.039  -0.023  -0.049  0.023   0.166   -0.136  0.166   -0.136  0.058   0.110   0.0730.035    0.002   0.034   0.075   0.069   0.405   0.551   0.369   0.629   0.237   1.0000.089    -0.055  -0.059
-0.007  0.084   0.054   0.079   0.139   -0.123  0.139   -0.123  0.093   0.133   0.0140.016    -0.004  0.658   0.332   0.679   0.692   0.123   0.096   0.096   0.180   0.0891.000    -0.014  -0.016
-0.003  -0.004  -0.010  0.005   -0.010  0.008   -0.010  0.008   0.002   -0.017  0.001-0.006   0.005   -0.030  -0.019  -0.028  -0.027  -0.032  0.014   -0.006  -0.018  -0.055-0.014  1.000   0.960
-0.000  -0.005  -0.012  0.006   -0.015  0.011   -0.015  0.011   -0.002  -0.019  -0.001-0.008  0.005   -0.032  -0.022  -0.030  -0.031  -0.035  0.012   -0.009  -0.020  -0.059-0.016  0.960   1.000



// ----- building the logistic regression model

import org.apache.spark.ml.feature.StandardScaler
val stdScaler = new StandardScaler().
setWithStd(true).
setWithMean(true).
setInputCol("features").
setOutputCol("scaledFeatures")

import org.apache.spark.ml.classification.LogisticRegression
val lr = new LogisticRegression
lr.setRegParam(0.01).setMaxIter(500).setFitIntercept(true).setFeaturesCol("scaledFeatures")

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(dfrawIndexer1,dfrawIndexer2,dfrawIndexer3,dfrawIndexer4,dfrawIndexer5,dfrawIndexer11,dfrawIndexer21,dfrawIndexer31,dfrawIndexer41,va,stdScaler,lr))

val Array(trainingData, testData) = df1.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
testData.cache

val model = pipeline.fit(trainingData)

val pred = model.transform(testData)

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator
val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res16: Double = 0.9273148635939136

bceval.setMetricName("areaUnderPR").evaluate(pred)
res17: Double = 0.9319402269461311

df2.groupBy("label").count.show
+-----+-----+
|label|count|
+-----+-----+
|  0.0|58879|
|  1.0|45025|
+-----+-----+

val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res30: org.apache.spark.mllib.linalg.Matrix =
2234.0  473.0
75.0    117.0

import org.apache.spark.ml.classification.LogisticRegressionModel

val lrmodel = model.stages(11).asInstanceOf[LogisticRegressionModel]

println(s"LR Model coefficients:\n${lrmodel.coefficients.toArray.mkString("\n")}")
LR Model coefficients:
-0.018897308073900547
0.6208576660916021
-0.07221187571430275
0.9975858839286448
0.20572868839166444
-0.015464160456754663
0.20572868839166444
-0.015464160456754663
0.03389434323925803
0.46035825062012337
-0.18068489089113957
-0.1137715803565539
0.005501251243134404
-0.03126205978278135
0.7222654823888335
0.11281227592124075
0.14830355179933907
0.3280469045397579
0.29426427669512273
0.14006163051083442
0.3466944662013657
0.11626789850447965
0.21978630006719507
-0.012190458713840648
-0.14496960660833247

-------------------

import org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}

val paramGrid = new ParamGridBuilder().
addGrid(lr.regParam, Array(0.1, 0.01, 0.001)).
addGrid(lr.fitIntercept).
addGrid(lr.maxIter, Array(100,300,500)).build()

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator

val cv = new CrossValidator().
setEstimator(pipeline).
setEvaluator(new BinaryClassificationEvaluator).
setEstimatorParamMaps(paramGrid).
setNumFolds(3)

val model = cv.fit(trainingData)

import org.apache.spark.ml.PipelineModel
val bestmodel = model.bestModel.asInstanceOf[PipelineModel]

import org.apache.spark.ml.classification.LogisticRegressionModel
val lrmodel = bestmodel.stages(11).asInstanceOf[LogisticRegressionModel]

lrmodel.getRegParam
res1: Double = 0.001

lrmodel.getMaxIter
res2: Int = 100

lrmodel.getThreshold
res3: Double = 0.5

lrmodel.getFitIntercept
res4: Boolean = true

lrmodel.getStandardization
res5: Boolean = true

val pred = bestmodel.transform(testData)

val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res26: Double = 0.9277764187442169

bceval.setMetricName("areaUnderPR").evaluate(pred)
res27: Double = 0.9323258217549412

df2.groupBy("label").count.show
+-----+-----+
|label|count|
+-----+-----+
|  0.0| 7963|
|  1.0| 2037|
+-----+-----+

val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res28: org.apache.spark.mllib.linalg.Matrix =
15784.0  2200.0
1691.0   11397.0

println(s"LR Model coefficients:\n${lrmodel.coefficients.toArray.mkString("\n")}")
LR Model coefficients:
-0.019674015112940483
0.7594857774372136
-0.12092769439992192
1.207181012188287
0.2211408524922888
0.02924998237523491
0.2211408524922888
0.02924998237523491
-0.004367190121939213
0.5289486447841205
-0.18514866273663874
-0.1940386051591285
0.02875598212570406
-0.04488872627051686
0.8145740768875371
0.09509778537562641
0.09318269089711463
0.38246353494591906
0.31995868527160815
0.15873876954761013
0.40155860309011215
0.13351455804310042
0.27131568621016494
0.10582399230141115
-0.2852717413140936