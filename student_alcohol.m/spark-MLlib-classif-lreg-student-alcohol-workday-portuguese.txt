---- Feature extraction & Data Munging --------------

val rdd = sc.textFile("student_alcohol/student-por.csv").map(x => x.split(","))

rdd.first
res0: Array[String] = Array(GP, F, 18, U, GT3, A, 4, 4, at_home, teacher, course, mother, 2, 2, 0, yes, no, no, no, yes, yes, no, no, 4, 3, 4, 1, 1, 3, 4, 0, 11, 11)

val categ_yesno = rdd.map(x => x(15)).distinct.zipWithIndex.collectAsMap
categ_yesno: scala.collection.Map[String,Long] = Map(no -> 1, yes -> 0)

val categ_sex = rdd.map(x => x(1)).distinct.zipWithIndex.collectAsMap
categ_sex: scala.collection.Map[String,Long] = Map(M -> 1, F -> 0)

val categ_address = rdd.map(x => x(3)).distinct.zipWithIndex.collectAsMap
categ_address: scala.collection.Map[String,Long] = Map(R -> 0, U -> 1)

val categ_famsize = rdd.map(x => x(4)).distinct.zipWithIndex.collectAsMap
categ_famsize: scala.collection.Map[String,Long] = Map(LE3 -> 0, GT3 -> 1)

val categ_pstatus = rdd.map(x => x(5)).distinct.zipWithIndex.collectAsMap
categ_pstatus: scala.collection.Map[String,Long] = Map(A -> 1, T -> 0)

val categ_mjob = rdd.map(x => x(8)).distinct.zipWithIndex.collectAsMap
categ_mjob: scala.collection.Map[String,Long] = Map(at_home -> 4, services -> 2, health -> 0, teacher -> 1, other -> 3)

val categ_fjob = rdd.map(x => x(9)).distinct.zipWithIndex.collectAsMap
categ_fjob: scala.collection.Map[String,Long] = Map(at_home -> 4, services -> 2, health -> 0, teacher -> 1, other -> 3)

val categ_reason = rdd.map(x => x(10)).distinct.zipWithIndex.collectAsMap
categ_reason: scala.collection.Map[String,Long] = Map(reputation -> 3, course -> 2, home -> 1, other -> 0)

val categ_guardian = rdd.map(x => x(11)).distinct.zipWithIndex.collectAsMap
categ_guardian: scala.collection.Map[String,Long] = Map(mother -> 2, father -> 0, other -> 1)

---- Conversion to 1-to-k binary encoding vectors 

def oneHotEncColumns(rddx: org.apache.spark.rdd.RDD[Array[String]], idx: Int):org.apache.spark.rdd.RDD[Array[Double]] = {
  val categories = rddx.map(r => r(idx)).distinct.zipWithIndex.collectAsMap
  val numCategories = categories.size
  val vetcateg = rddx.map(r => {
    val categoryIdx = categories(r(idx)).toInt
	val categoryFeatures = if (numCategories > 2) Array.ofDim[Double](numCategories) else Array.ofDim[Double](1)
	if (numCategories > 2) categoryFeatures(categoryIdx) = 1.0 else categoryFeatures(0) = categoryIdx
    categoryFeatures
	})
  vetcateg
}

def mergeArray(rddx: org.apache.spark.rdd.RDD[Array[String]], idx: Int*):org.apache.spark.rdd.RDD[Array[Double]] = {
  var i = 0
  var arr1 = oneHotEncColumns(rddx,idx(i))
  for (j <- 1 until idx.size) {
    var arr2 = oneHotEncColumns(rddx,idx(j))
    var flt1 = arr1.zip(arr2).map(x => (x._1.toList ++ x._2.toList).toArray)
    arr1 = flt1
  }
  arr1
}

val concat = mergeArray(rdd,8,9,10,11)

concat.first
res1: Array[Double] = Array(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)

val rdd1 = rdd.map( x => { 
  val y = Array(categ_sex(x(1)),x(2),categ_address(x(3)),categ_famsize(x(4)),categ_pstatus(x(5)),x(6),x(7),x(12),x(13),x(14),categ_yesno(x(15)),categ_yesno(x(16)),categ_yesno(x(17)),categ_yesno(x(18)),categ_yesno(x(19)),categ_yesno(x(20)),categ_yesno(x(21)),categ_yesno(x(22)),x(23),x(24),x(25),x(28),x(29),x(30),x(31),x(32),x(26))
  y.map( z => z.toString.toDouble )
})
  
val vect = concat.zip(rdd1).map(x => (x._1.toList ++ x._2.toList).toArray)

vect.first
res31: Array[Double] = Array(0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 18.0, 1.0, 1.0, 1.0, 4.0, 4.0, 2.0, 2.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 4.0, 3.0, 4.0, 3.0, 4.0, 0.0, 11.0, 11.0, 1.0

val rdd1_dt = rdd.map( x => { 
  val y = Array(categ_sex(x(1)),x(2),categ_address(x(3)),categ_famsize(x(4)),categ_pstatus(x(5)),x(6),x(7),categ_mjob(x(8)),categ_fjob(x(9)),categ_reason(x(10)),categ_guardian(x(11)),x(12),x(13),x(14),categ_yesno(x(15)),categ_yesno(x(16)),categ_yesno(x(17)),categ_yesno(x(18)),categ_yesno(x(19)),categ_yesno(x(20)),categ_yesno(x(21)),categ_yesno(x(22)),x(23),x(24),x(25),x(28),x(29),x(30),x(31),x(32),x(26))
  y.map( z => z.toString.toDouble )
})

val data = vect.zip(rdd1_dt)

val sets = data.randomSplit(Array(0.7,0.3), 11L)
val train_rdd = sets(0)
val test_rdd = sets(1)

import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint

val trainSet = train_rdd.map( x => {
   val x1 = x._1
   val l1 = x1(x1.size - 1) - 1
   val f1 = x1.slice(0,x1.size - 1)
   LabeledPoint(l1,Vectors.dense(f1))
 })
  
val testSet = test_rdd.map( x => {
   val x1 = x._1
   val l1 = x1(x1.size - 1) - 1
   val f1 = x1.slice(0,x1.size - 1)
   LabeledPoint(l1,Vectors.dense(f1))
 })
 
trainSet.cache

---- MLlib Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(5).run(trainSet)

val validPredicts =  testSet.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res12: Array[(Double, Double)] = Array((0.0,1.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,1.0), (0.0,0.0), (0.0,0.0), (3.0,1.0), (0.0,0.0), (0.0,0.0), (1.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,4.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 134
validPredicts.count                            // 203
val accuracy = metrics.accuracy   // 0.6600985221674877

metrics.confusionMatrix
res15: org.apache.spark.mllib.linalg.Matrix =
131.0  10.0  3.0  3.0  6.0
24.0   2.0   1.0  3.0  3.0
5.0    1.0   1.0  1.0  1.0
3.0    1.0   0.0  0.0  0.0
3.0    1.0   0.0  0.0  0.0

---- MLlib Naive Bayes regression --------------

import org.apache.spark.mllib.classification.NaiveBayes
val model = NaiveBayes.train(trainSet)

val validPredicts =  testSet.map(p => (model.predict(p.features),p.label))

validPredicts.take(20)
res16: Array[(Double, Double)] = Array((0.0,1.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,1.0), (0.0,0.0), (0.0,0.0), (1.0,1.0), (0.0,0.0), (0.0,0.0), (1.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,4.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 117
validPredicts.count                            // 203
val accuracy = metrics.accuracy   // 0.5763546798029556

metrics.confusionMatrix
res19: org.apache.spark.mllib.linalg.Matrix =
115.0  18.0  6.0  3.0  11.0
24.0   2.0   1.0  1.0  5.0
4.0    2.0   0.0  0.0  3.0
2.0    1.0   1.0  0.0  0.0
3.0    0.0   1.0  0.0  0.0

---- Analyzing statistics for standardization ---------------------

import org.apache.spark.mllib.linalg.Matrix
import org.apache.spark.mllib.linalg.distributed.RowMatrix

val vectors = trainSet.map{ case LabeledPoint(x,y) => y }
val matrix = new RowMatrix(vectors)
val matrixSummary = matrix.computeColumnSummaryStatistics()

matrixSummary.max
res20: org.apache.spark.mllib.linalg.Vector = [1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,22.0,1.0,1.0,1.0,4.0,4.0,4.0,4.0,3.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,5.0,5.0,5.0,5.0,32.0,18.0,18.0,18.0]

matrixSummary.min
res21: org.apache.spark.mllib.linalg.Vector = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,15.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,1.0,1.0,1.0,1.0,0.0,0.0,0.0,0.0]

matrixSummary.mean
res22: org.apache.spark.mllib.linalg.Vector = [0.06726457399103139,0.11659192825112108,0.20179372197309417,0.4125560538116592,0.20179372197309417,0.03587443946188341,0.0515695067264574,0.2825112107623318,0.5695067264573991,0.06053811659192825,0.11434977578475336,0.24439461883408073,0.437219730941704,0.2040358744394619,0.242152466367713,0.06950672645739911,0.6883408071748879,0.4103139013452915,16.7286995515695,0.6860986547085202,0.7174887892376681,0.11659192825112108,2.5134529147982048,2.2802690582959633,1.5717488789237668,1.908071748878923,0.21076233183856502,0.8856502242152466,0.38565022421524664,0.9394618834080718,0.5246636771300448,0.2062780269058296,0.10986547085201794,0.23094170403587444,0.6300448430493274,3.930493273542601,3.1838565022421514,3.2040358744394624,3.5224215246636783,3...

matrixSummary.variance
res23: org.apache.spark.mllib.linalg.Vector = [0.0628810399556608,0.10322970726054316,0.16143497757847533,0.24289817100821284,0.16143497757847533,0.034665188693505315,0.049020003023126923,0.20315412908751954,0.2457197561344284,0.057001058094422324,0.10150148637073612,0.1850808686451353,0.24661157857610722,0.1627701919685595,0.18392704187030787,0.064820879729934,0.2150098251624931,0.2425001259636217,1.4790396533481158,0.2158512621554895,0.20315412908751954,0.10322970726054316,1.3245377135083376,1.222396331939336,0.5600090693807626,0.7173729027056986,0.32401874338690984,0.10150148637073612,0.2374565425505114,0.057001058094422324,0.2499521338237517,0.16409532926890713,0.09801481332191263,0.17800675165012345,0.23361213281604273,0.9097646999546534,1.1481432962160525,1.4301859223056381,2.1107...

----- Decide to scale features because columns have different scales and then retrain the model 

import org.apache.spark.mllib.feature.StandardScaler
val scaler = new StandardScaler(true, true).fit(trainSet.map(x => x.features))
 
val trainScaled = trainSet.map(x => LabeledPoint(x.label,scaler.transform(x.features)))

---- Multiclass logistic regression --------------

import org.apache.spark.mllib.classification.{LogisticRegressionModel, LogisticRegressionWithLBFGS}
val numIterations = 100
val model = new LogisticRegressionWithLBFGS().setNumClasses(5).run(trainScaled)

val validPredicts =  testSet.map(p => (model.predict(scaler.transform(p.features)),p.label))

validPredicts.take(20)
res25: Array[(Double, Double)] = Array((1.0,1.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (2.0,0.0), (2.0,0.0), (0.0,0.0), (0.0,1.0), (0.0,0.0), (0.0,0.0), (1.0,1.0), (1.0,0.0), (0.0,0.0), (1.0,0.0), (0.0,0.0), (1.0,0.0), (0.0,0.0), (0.0,4.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 101
validPredicts.count                            // 203
val accuracy = metrics.accuracy   // 0.4975369458128079

metrics.confusionMatrix
res28: org.apache.spark.mllib.linalg.Matrix =
89.0  30.0  18.0  10.0  6.0
13.0  12.0  4.0   2.0   2.0
5.0   3.0   0.0   0.0   1.0
0.0   2.0   1.0   0.0   1.0
1.0   1.0   2.0   0.0   0.0

---- Not helpful on standardizing. Using decision tree model to evaluate performance.

val trainSet = train_rdd.map( x => {
   val x1 = x._2
   val l1 = x1(x1.size - 1) - 1
   val f1 = x1.slice(0,x1.size - 1)
   LabeledPoint(l1,Vectors.dense(f1))
 })
 
val testSet = test_rdd.map( x => {
   val x1 = x._2
   val l1 = x1(x1.size - 1) - 1
   val f1 = x1.slice(0,x1.size - 1)
   LabeledPoint(l1,Vectors.dense(f1))
 })

trainSet.cache

import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel

val categoricalFeaturesInfo = Map[Int, Int](0->2, 2->2, 3->2, 4->2, 7->5, 8->5, 9->4, 10->3, 14->2, 15->2, 16->2, 17->2, 18->2, 19->2, 20->2, 21->2)

def iterateDTC(depthNums:Array[Int], binNums:Array[Int], train:RDD[LabeledPoint], test:RDD[LabeledPoint]) = {
  println("impurity, depth, bin -> pred / total, accuracy") 
  for(impurity <- Array("gini", "entropy"); numDepth <- depthNums; numBin <- binNums ) {
    val model = DecisionTree.trainClassifier(train, 5, categoricalFeaturesInfo, impurity, numDepth, numBin)
    val validPredicts = test.map(x => (model.predict(x.features),x.label))
    val metrics = new MulticlassMetrics(validPredicts)
    println("%s, %d, %d ->  %d / %d, %.4f".format(impurity, numDepth, numBin, validPredicts.filter(x => x._1 == x._2).count, test.count, metrics.accuracy))
  }
}

iterateDTC(Array(10,20,30), Array(32,48,64), trainSet, testSet)
impurity, depth, bin -> pred / total, accuracy
gini, 10, 32 ->  119 / 203, 0.5862
gini, 10, 48 ->  119 / 203, 0.5862
gini, 10, 64 ->  119 / 203, 0.5862  *
gini, 20, 32 ->  116 / 203, 0.5714
gini, 20, 48 ->  116 / 203, 0.5714
gini, 20, 64 ->  116 / 203, 0.5714
gini, 30, 32 ->  116 / 203, 0.5714
gini, 30, 48 ->  116 / 203, 0.5714
gini, 30, 64 ->  116 / 203, 0.5714
entropy, 10, 32 ->  103 / 203, 0.5074
entropy, 10, 48 ->  103 / 203, 0.5074
entropy, 10, 64 ->  103 / 203, 0.5074
entropy, 20, 32 ->  99 / 203, 0.4877
entropy, 20, 48 ->  99 / 203, 0.4877
entropy, 20, 64 ->  99 / 203, 0.4877
entropy, 30, 32 ->  99 / 203, 0.4877
entropy, 30, 48 ->  99 / 203, 0.4877
entropy, 30, 64 ->  99 / 203, 0.4877


val model = DecisionTree.trainClassifier(trainSet, 5, categoricalFeaturesInfo, "gini", 10, 64)

model.toDebugString
es32: String =
"DecisionTreeModel classifier of depth 10 with 199 nodes
  If (feature 29 <= 12.5)
   If (feature 0 in {0.0})
    If (feature 5 <= 2.5)
     If (feature 28 <= 10.5)
      If (feature 29 <= 7.5)
       If (feature 7 in {3.0})
        Predict: 1.0
       Else (feature 7 not in {3.0})
        If (feature 8 in {2.0})
         Predict: 1.0
        Else (feature 8 not in {2.0})
         Predict: 0.0
      Else (feature 29 > 7.5)
       If (feature 22 <= 2.5)
        If (feature 10 in {0.0,1.0})
         If (feature 1 <= 17.5)
          Predict: 2.0
         Else (feature 1 > 17.5)
          Predict: 3.0
        Else (feature 10 not in {0.0,1.0})
         Predict: 0.0
       Else (feature 22 > 2.5)
        If (feature 14 in {0.0})
         If (feature 18 in {0.0})
          Pre...

val validPredicts = testSet.map(x => (model.predict(x.features),x.label))

validPredicts.take(20)
res33: Array[(Double, Double)] = Array((1.0,1.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (0.0,0.0), (1.0,0.0), (2.0,0.0), (0.0,0.0), (0.0,1.0), (1.0,0.0), (1.0,0.0), (1.0,1.0), (0.0,0.0), (0.0,0.0), (1.0,0.0), (0.0,0.0), (0.0,0.0), (1.0,0.0), (1.0,4.0), (0.0,0.0))

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)
validPredicts.filter(x => x._1 == x._2).count  // 119
validPredicts.count                            // 203
val accuracy = metrics.accuracy   // 0.5862068965517241

metrics.confusionMatrix
res36: org.apache.spark.mllib.linalg.Matrix =
108.0  27.0  11.0  4.0  3.0
15.0   9.0   6.0   1.0  2.0
4.0    1.0   2.0   1.0  1.0
3.0    1.0   0.0   0.0  0.0
1.0    3.0   0.0   0.0  0.0

