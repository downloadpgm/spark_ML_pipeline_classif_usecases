---- Exploratory Data Analysis --------------

val df = spark.read.format("csv").option("header","true").option("inferSchema","true").load("food_mkt/ml_project1_data.csv")

df.printSchema
root
 |-- ID: integer (nullable = true)
 |-- Year_Birth: integer (nullable = true)
 |-- Education: string (nullable = true)
 |-- Marital_Status: string (nullable = true)
 |-- Income: integer (nullable = true)
 |-- Kidhome: integer (nullable = true)
 |-- Teenhome: integer (nullable = true)
 |-- Dt_Customer: timestamp (nullable = true)
 |-- Recency: integer (nullable = true)
 |-- MntWines: integer (nullable = true)
 |-- MntFruits: integer (nullable = true)
 |-- MntMeatProducts: integer (nullable = true)
 |-- MntFishProducts: integer (nullable = true)
 |-- MntSweetProducts: integer (nullable = true)
 |-- MntGoldProds: integer (nullable = true)
 |-- NumDealsPurchases: integer (nullable = true)
 |-- NumWebPurchases: integer (nullable = true)
 |-- NumCatalogPurchases: integer (nullable = true)
 |-- NumStorePurchases: integer (nullable = true)
 |-- NumWebVisitsMonth: integer (nullable = true)
 |-- AcceptedCmp3: integer (nullable = true)
 |-- AcceptedCmp4: integer (nullable = true)
 |-- AcceptedCmp5: integer (nullable = true)
 |-- AcceptedCmp1: integer (nullable = true)
 |-- AcceptedCmp2: integer (nullable = true)
 |-- Complain: integer (nullable = true)
 |-- Z_CostContact: integer (nullable = true)
 |-- Z_Revenue: integer (nullable = true)
 |-- Response: integer (nullable = true)
 
df.show(10)
+----+----------+----------+--------------+------+-------+--------+-------------------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+
|  ID|Year_Birth| Education|Marital_Status|Income|Kidhome|Teenhome|        Dt_Customer|Recency|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumDealsPurchases|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|AcceptedCmp3|AcceptedCmp4|AcceptedCmp5|AcceptedCmp1|AcceptedCmp2|Complain|Z_CostContact|Z_Revenue|Response|
+----+----------+----------+--------------+------+-------+--------+-------------------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+
|5524|      1957|Graduation|        Single| 58138|      0|       0|2012-09-04 00:00:00|     58|     635|       88|            546|            172|              88|          88|                3|              8|                 10|                4|                7|           0|           0|           0|           0|           0|       0|            3|       11|       1|
|2174|      1954|Graduation|        Single| 46344|      1|       1|2014-03-08 00:00:00|     38|      11|        1|              6|              2|               1|           6|                2|              1|                  1|                2|                5|           0|           0|           0|           0|           0|       0|            3|       11|       0|
|4141|      1965|Graduation|      Together| 71613|      0|       0|2013-08-21 00:00:00|     26|     426|       49|            127|            111|              21|          42|                1|              8|                  2|               10|                4|           0|           0|           0|           0|           0|       0|            3|       11|       0|
|6182|      1984|Graduation|      Together| 26646|      1|       0|2014-02-10 00:00:00|     26|      11|        4|             20|             10|               3|           5|                2|              2|                  0|                4|                6|           0|           0|           0|           0|           0|       0|            3|       11|       0|
|5324|      1981|       PhD|       Married| 58293|      1|       0|2014-01-19 00:00:00|     94|     173|       43|            118|             46|              27|          15|                5|              5|                  3|                6|                5|           0|           0|           0|           0|           0|       0|            3|       11|       0|
|7446|      1967|    Master|      Together| 62513|      0|       1|2013-09-09 00:00:00|     16|     520|       42|             98|              0|              42|          14|                2|              6|                  4|               10|                6|           0|           0|           0|           0|           0|       0|            3|       11|       0|
| 965|      1971|Graduation|      Divorced| 55635|      0|       1|2012-11-13 00:00:00|     34|     235|       65|            164|             50|              49|          27|                4|              7|                  3|                7|                6|           0|           0|           0|           0|           0|       0|            3|       11|       0|
|6177|      1985|       PhD|       Married| 33454|      1|       0|2013-05-08 00:00:00|     32|      76|       10|             56|              3|               1|          23|                2|              4|                  0|                4|                8|           0|           0|           0|           0|           0|       0|            3|       11|       0|
|4855|      1974|       PhD|      Together| 30351|      1|       0|2013-06-06 00:00:00|     19|      14|        0|             24|              3|               3|           2|                1|              3|                  0|                2|                9|           0|           0|           0|           0|           0|       0|            3|       11|       1|
|5899|      1950|       PhD|      Together|  5648|      1|       1|2014-03-13 00:00:00|     68|      28|        0|              6|              1|               1|          13|                1|              1|                  0|                0|               20|           1|           0|           0|           0|           0|       0|            3|       11|       0|
+----+----------+----------+--------------+------+-------+--------+-------------------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+
only showing top 10 rows

df.describe().show()

|summary|                ID|        Year_Birth|Education|Marital_Status|            Income|            Kidhome|          Teenhome|          Recency|          MntWines|         MntFruits|  MntMeatProducts|   MntFishProducts| MntSweetProducts|    MntGoldProds|NumDealsPurchases|   NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|       AcceptedCmp3|       AcceptedCmp4|       AcceptedCmp5|       AcceptedCmp1|        AcceptedCmp2|           Complain|Z_CostContact|Z_Revenue|           Response|
+-------+------------------+------------------+---------+--------------+------------------+-------------------+------------------+-----------------+------------------+------------------+-----------------+------------------+-----------------+----------------+-----------------+------------------+-------------------+-----------------+-----------------+-------------------+-------------------+-------------------+-------------------+--------------------+-------------------+-------------+---------+-------------------+
|  count|              2240|              2240|     2240|          2240|              2216|               2240|              2240|             2240|              2240|              2240|             2240|              2240|             2240|            2240|             2240|              2240|               2240|             2240|             2240|               2240|               2240|               2240|               2240|                2240|               2240|         2240|     2240|               2240|
|   mean| 5592.159821428571|1968.8058035714287|     null|          null| 52247.25135379061|0.44419642857142855|           0.50625|        49.109375| 303.9357142857143|26.302232142857143|           166.95| 37.52544642857143|27.06294642857143|       44.021875|            2.325| 4.084821428571429| 2.6620535714285714|5.790178571428571|5.316517857142857|0.07276785714285715|0.07455357142857143|0.07276785714285715|0.06428571428571428|0.013392857142857142|           0.009375|          3.0|     11.0|0.14910714285714285|
| stddev|3246.6621975643416|11.984069456885827|     null|          null|25173.076660901414| 0.5383980977345935|0.5445382307698761|28.96245280837821|336.59739260537197|39.773433764578584|225.7153725117536|54.628979402878095|41.28049848785491|52.1674389149973| 1.93223750085598|2.7787141473881007| 2.9231006555397463|3.250958145674428| 2.42664500954729| 0.2598130699218951|0.26272828485356176| 0.2598130699218953|0.24531597433401406| 0.11497560625548417|0.09639116794449748|          0.0|      0.0|0.35627358640847934|
|    min|                 0|              1893| 2n Cycle|        Absurd|              1730|                  0|                 0|                0|                 0|                 0|                0|                 0|                0|               0|                0|                 0|                  0|                0|                0|                  0|                  0|                  0|                  0|                   0|                  0|            3|       11|                  0|
|    max|             11191|              1996|      PhD|          YOLO|            666666|                  2|                 2|               99|              1493|               199|             1725|               259|              263|             362|               15|                27|                 28|               13|               20|                  1|                  1|                  1|                  1|                   1|                  1|            3|       11|                  1|

 
val df1 = df.where("Income is not null").
withColumn("age",lit(2020)-col("Year_Birth")).withColumn("enrolled_to_date",datediff(current_date(),col("Dt_Customer"))).
withColumn("label", 'Response).
drop("ID", "Year_Birth", "Dt_Customer")

df1.printSchema
root
 |-- Education: string (nullable = true)
 |-- Marital_Status: string (nullable = true)
 |-- Income: integer (nullable = true)
 |-- Kidhome: integer (nullable = true)
 |-- Teenhome: integer (nullable = true)
 |-- Recency: integer (nullable = true)
 |-- MntWines: integer (nullable = true)
 |-- MntFruits: integer (nullable = true)
 |-- MntMeatProducts: integer (nullable = true)
 |-- MntFishProducts: integer (nullable = true)
 |-- MntSweetProducts: integer (nullable = true)
 |-- MntGoldProds: integer (nullable = true)
 |-- NumDealsPurchases: integer (nullable = true)
 |-- NumWebPurchases: integer (nullable = true)
 |-- NumCatalogPurchases: integer (nullable = true)
 |-- NumStorePurchases: integer (nullable = true)
 |-- NumWebVisitsMonth: integer (nullable = true)
 |-- AcceptedCmp3: integer (nullable = true)
 |-- AcceptedCmp4: integer (nullable = true)
 |-- AcceptedCmp5: integer (nullable = true)
 |-- AcceptedCmp1: integer (nullable = true)
 |-- AcceptedCmp2: integer (nullable = true)
 |-- Complain: integer (nullable = true)
 |-- Z_CostContact: integer (nullable = true)
 |-- Z_Revenue: integer (nullable = true)
 |-- Response: integer (nullable = true)
 |-- age: integer (nullable = true)
 |-- enrolled_to_date: integer (nullable = true)
 |-- label: integer (nullable = true)

df1.show(10)
+----------+--------------+------+-------+--------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+---+----------------+-----+
| Education|Marital_Status|Income|Kidhome|Teenhome|Recency|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumDealsPurchases|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|AcceptedCmp3|AcceptedCmp4|AcceptedCmp5|AcceptedCmp1|AcceptedCmp2|Complain|Z_CostContact|Z_Revenue|Response|age|enrolled_to_date|label|
+----------+--------------+------+-------+--------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+---+----------------+-----+
|Graduation|        Single| 58138|      0|       0|     58|     635|       88|            546|            172|              88|          88|                3|              8|                 10|                4|                7|           0|           0|           0|           0|           0|       0|            3|       11|       1| 63|            3645|    1|
|Graduation|        Single| 46344|      1|       1|     38|      11|        1|              6|              2|               1|           6|                2|              1|                  1|                2|                5|           0|           0|           0|           0|           0|       0|            3|       11|       0| 66|            3095|    0|
|Graduation|      Together| 71613|      0|       0|     26|     426|       49|            127|            111|              21|          42|                1|              8|                  2|               10|                4|           0|           0|           0|           0|           0|       0|            3|       11|       0| 55|            3294|    0|
|Graduation|      Together| 26646|      1|       0|     26|      11|        4|             20|             10|               3|           5|                2|              2|                  0|                4|                6|           0|           0|           0|           0|           0|       0|            3|       11|       0| 36|            3121|    0|
|       PhD|       Married| 58293|      1|       0|     94|     173|       43|            118|             46|              27|          15|                5|              5|                  3|                6|                5|           0|           0|           0|           0|           0|       0|            3|       11|       0| 39|            3143|    0|
|    Master|      Together| 62513|      0|       1|     16|     520|       42|             98|              0|              42|          14|                2|              6|                  4|               10|                6|           0|           0|           0|           0|           0|       0|            3|       11|       0| 53|            3275|    0|
|Graduation|      Divorced| 55635|      0|       1|     34|     235|       65|            164|             50|              49|          27|                4|              7|                  3|                7|                6|           0|           0|           0|           0|           0|       0|            3|       11|       0| 49|            3575|    0|
|       PhD|       Married| 33454|      1|       0|     32|      76|       10|             56|              3|               1|          23|                2|              4|                  0|                4|                8|           0|           0|           0|           0|           0|       0|            3|       11|       0| 35|            3399|    0|
|       PhD|      Together| 30351|      1|       0|     19|      14|        0|             24|              3|               3|           2|                1|              3|                  0|                2|                9|           0|           0|           0|           0|           0|       0|            3|       11|       1| 46|            3370|    1|
|       PhD|      Together|  5648|      1|       1|     68|      28|        0|              6|              1|               1|          13|                1|              1|                  0|                0|               20|           1|           0|           0|           0|           0|       0|            3|       11|       0| 70|            3090|    0|
+----------+--------------+------+-------+--------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+---+----------------+-----+
only showing top 10 rows

df1.groupBy('Education).count.show
+----------+-----+
| Education|count|
+----------+-----+
|  2n Cycle|  200|
|       PhD|  481|
|    Master|  365|
|Graduation| 1116|
|     Basic|   54|
+----------+-----+

df1.groupBy('Marital_Status).count.show
+--------------+-----+
|Marital_Status|count|
+--------------+-----+
|          YOLO|    2|
|      Together|  573|
|       Married|  857|
|        Absurd|    2|
|         Widow|   76|
|      Divorced|  232|
|         Alone|    3|
|        Single|  471|
+--------------+-----+

df1.groupBy('Response).count.show
+--------+-----+
|Response|count|
+--------+-----+
|       1|  333|
|       0| 1883|
+--------+-----+


---- Feature extraction & Data Munging --------------

import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

val types = df1.dtypes
types: Array[(String, String)] = Array((Education,StringType), (Marital_Status,StringType), (Income,IntegerType), (Kidhome,IntegerType), (Teenhome,IntegerType), (Recency,IntegerType), (MntWines,IntegerType), (MntFruits,IntegerType), (MntMeatProducts,IntegerType), (MntFishProducts,IntegerType), (MntSweetProducts,IntegerType), (MntGoldProds,IntegerType), (NumDealsPurchases,IntegerType), (NumWebPurchases,IntegerType), (NumCatalogPurchases,IntegerType), (NumStorePurchases,IntegerType), (NumWebVisitsMonth,IntegerType), (AcceptedCmp3,IntegerType), (AcceptedCmp4,IntegerType), (AcceptedCmp5,IntegerType), (AcceptedCmp1,IntegerType), (AcceptedCmp2,IntegerType), (Complain,IntegerType), (Z_CostContact,IntegerType), (Z_Revenue,IntegerType), (Response,IntegerType), (age,IntegerType), (enrolled_to_dat...

df1.select(types.map{ case(c,t) =>  if (t == "IntegerType") col(c).cast(DoubleType) else col(c) }: _*)
res2: org.apache.spark.sql.DataFrame = [Education: string, Marital_Status: string ... 26 more fields]

val df2 = df1.select(types.map{ case(c,t) =>  if (t == "IntegerType") col(c).cast(DoubleType) else col(c) }: _*)
df2: org.apache.spark.sql.DataFrame = [Education: string, Marital_Status: string ... 26 more fields]

df2.printSchema
root
 |-- Education: string (nullable = true)
 |-- Marital_Status: string (nullable = true)
 |-- Income: double (nullable = true)
 |-- Kidhome: double (nullable = true)
 |-- Teenhome: double (nullable = true)
 |-- Recency: double (nullable = true)
 |-- MntWines: double (nullable = true)
 |-- MntFruits: double (nullable = true)
 |-- MntMeatProducts: double (nullable = true)
 |-- MntFishProducts: double (nullable = true)
 |-- MntSweetProducts: double (nullable = true)
 |-- MntGoldProds: double (nullable = true)
 |-- NumDealsPurchases: double (nullable = true)
 |-- NumWebPurchases: double (nullable = true)
 |-- NumCatalogPurchases: double (nullable = true)
 |-- NumStorePurchases: double (nullable = true)
 |-- NumWebVisitsMonth: double (nullable = true)
 |-- AcceptedCmp3: double (nullable = true)
 |-- AcceptedCmp4: double (nullable = true)
 |-- AcceptedCmp5: double (nullable = true)
 |-- AcceptedCmp1: double (nullable = true)
 |-- AcceptedCmp2: double (nullable = true)
 |-- Complain: double (nullable = true)
 |-- Z_CostContact: double (nullable = true)
 |-- Z_Revenue: double (nullable = true)
 |-- Response: double (nullable = true)
 |-- age: double (nullable = true)
 |-- enrolled_to_date: double (nullable = true)
 |-- label: double (nullable = true)


import org.apache.spark.ml.feature.{StringIndexer, OneHotEncoder, VectorAssembler}

val dfInd1 = new StringIndexer().setInputCol("Education").setOutputCol("EducationCat").setHandleInvalid("skip")
val dfInd2 = new StringIndexer().setInputCol("Marital_Status").setOutputCol("Marital_StatusCat").setHandleInvalid("skip")

val dfOne1 = new OneHotEncoder().setInputCol("EducationCat").setOutputCol("EducationVect")
val dfOne2 = new OneHotEncoder().setInputCol("Marital_StatusCat").setOutputCol("Marital_StatusVect")

val va = new VectorAssembler().setOutputCol("features").setInputCols(Array("EducationVect","Marital_StatusVect","Income","Kidhome","Teenhome","Recency","MntWines","MntFruits","MntMeatProducts","MntFishProducts","MntSweetProducts","MntGoldProds","NumDealsPurchases","NumWebPurchases","NumCatalogPurchases","NumStorePurchases","NumWebVisitsMonth","AcceptedCmp1","AcceptedCmp2","AcceptedCmp3","AcceptedCmp4","AcceptedCmp5","Complain","Z_CostContact","Z_Revenue","age","enrolled_to_date"))

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(dfInd1,dfInd2,dfOne1,dfOne2,va))

val df3 = pipeline.fit(df2).transform(df2)

df3.printSchema
root
 |-- Education: string (nullable = true)
 |-- Marital_Status: string (nullable = true)
 |-- Income: double (nullable = true)
 |-- Kidhome: double (nullable = true)
 |-- Teenhome: double (nullable = true)
 |-- Recency: double (nullable = true)
 |-- MntWines: double (nullable = true)
 |-- MntFruits: double (nullable = true)
 |-- MntMeatProducts: double (nullable = true)
 |-- MntFishProducts: double (nullable = true)
 |-- MntSweetProducts: double (nullable = true)
 |-- MntGoldProds: double (nullable = true)
 |-- NumDealsPurchases: double (nullable = true)
 |-- NumWebPurchases: double (nullable = true)
 |-- NumCatalogPurchases: double (nullable = true)
 |-- NumStorePurchases: double (nullable = true)
 |-- NumWebVisitsMonth: double (nullable = true)
 |-- AcceptedCmp3: double (nullable = true)
 |-- AcceptedCmp4: double (nullable = true)
 |-- AcceptedCmp5: double (nullable = true)
 |-- AcceptedCmp1: double (nullable = true)
 |-- AcceptedCmp2: double (nullable = true)
 |-- Complain: double (nullable = true)
 |-- Z_CostContact: double (nullable = true)
 |-- Z_Revenue: double (nullable = true)
 |-- Response: double (nullable = true)
 |-- age: double (nullable = true)
 |-- enrolled_to_date: double (nullable = true)
 |-- label: double (nullable = true)
 |-- EducationCat: double (nullable = false)
 |-- Marital_StatusCat: double (nullable = false)
 |-- EducationVect: vector (nullable = true)
 |-- Marital_StatusVect: vector (nullable = true)
 |-- features: vector (nullable = true)

df3.show(10)
+----------+--------------+-------+-------+--------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+----+----------------+-----+------------+-----------------+-------------+------------------+--------------------+
| Education|Marital_Status| Income|Kidhome|Teenhome|Recency|MntWines|MntFruits|MntMeatProducts|MntFishProducts|MntSweetProducts|MntGoldProds|NumDealsPurchases|NumWebPurchases|NumCatalogPurchases|NumStorePurchases|NumWebVisitsMonth|AcceptedCmp3|AcceptedCmp4|AcceptedCmp5|AcceptedCmp1|AcceptedCmp2|Complain|Z_CostContact|Z_Revenue|Response| age|enrolled_to_date|label|EducationCat|Marital_StatusCat|EducationVect|Marital_StatusVect|            features|
+----------+--------------+-------+-------+--------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+----+----------------+-----+------------+-----------------+-------------+------------------+--------------------+
|Graduation|        Single|58138.0|    0.0|     0.0|   58.0|   635.0|     88.0|          546.0|          172.0|            88.0|        88.0|              3.0|            8.0|               10.0|              4.0|              7.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     1.0|63.0|          3645.0|  1.0|         0.0|              2.0|(4,[0],[1.0])|     (7,[2],[1.0])|(36,[0,6,11,14,15...|
|Graduation|        Single|46344.0|    1.0|     1.0|   38.0|    11.0|      1.0|            6.0|            2.0|             1.0|         6.0|              2.0|            1.0|                1.0|              2.0|              5.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|66.0|          3095.0|  0.0|         0.0|              2.0|(4,[0],[1.0])|     (7,[2],[1.0])|(36,[0,6,11,12,13...|
|Graduation|      Together|71613.0|    0.0|     0.0|   26.0|   426.0|     49.0|          127.0|          111.0|            21.0|        42.0|              1.0|            8.0|                2.0|             10.0|              4.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|55.0|          3294.0|  0.0|         0.0|              1.0|(4,[0],[1.0])|     (7,[1],[1.0])|(36,[0,5,11,14,15...|
|Graduation|      Together|26646.0|    1.0|     0.0|   26.0|    11.0|      4.0|           20.0|           10.0|             3.0|         5.0|              2.0|            2.0|                0.0|              4.0|              6.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|36.0|          3121.0|  0.0|         0.0|              1.0|(4,[0],[1.0])|     (7,[1],[1.0])|(36,[0,5,11,12,14...|
|       PhD|       Married|58293.0|    1.0|     0.0|   94.0|   173.0|     43.0|          118.0|           46.0|            27.0|        15.0|              5.0|            5.0|                3.0|              6.0|              5.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|39.0|          3143.0|  0.0|         1.0|              0.0|(4,[1],[1.0])|     (7,[0],[1.0])|(36,[1,4,11,12,14...|
|    Master|      Together|62513.0|    0.0|     1.0|   16.0|   520.0|     42.0|           98.0|            0.0|            42.0|        14.0|              2.0|            6.0|                4.0|             10.0|              6.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|53.0|          3275.0|  0.0|         2.0|              1.0|(4,[2],[1.0])|     (7,[1],[1.0])|(36,[2,5,11,13,14...|
|Graduation|      Divorced|55635.0|    0.0|     1.0|   34.0|   235.0|     65.0|          164.0|           50.0|            49.0|        27.0|              4.0|            7.0|                3.0|              7.0|              6.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|49.0|          3575.0|  0.0|         0.0|              3.0|(4,[0],[1.0])|     (7,[3],[1.0])|(36,[0,7,11,13,14...|
|       PhD|       Married|33454.0|    1.0|     0.0|   32.0|    76.0|     10.0|           56.0|            3.0|             1.0|        23.0|              2.0|            4.0|                0.0|              4.0|              8.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|35.0|          3399.0|  0.0|         1.0|              0.0|(4,[1],[1.0])|     (7,[0],[1.0])|(36,[1,4,11,12,14...|
|       PhD|      Together|30351.0|    1.0|     0.0|   19.0|    14.0|      0.0|           24.0|            3.0|             3.0|         2.0|              1.0|            3.0|                0.0|              2.0|              9.0|         0.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     1.0|46.0|          3370.0|  1.0|         1.0|              1.0|(4,[1],[1.0])|     (7,[1],[1.0])|(36,[1,5,11,12,14...|
|       PhD|      Together| 5648.0|    1.0|     1.0|   68.0|    28.0|      0.0|            6.0|            1.0|             1.0|        13.0|              1.0|            1.0|                0.0|              0.0|             20.0|         1.0|         0.0|         0.0|         0.0|         0.0|     0.0|          3.0|     11.0|     0.0|70.0|          3090.0|  0.0|         1.0|              1.0|(4,[1],[1.0])|     (7,[1],[1.0])|(36,[1,5,11,12,13...|
+----------+--------------+-------+-------+--------+-------+--------+---------+---------------+---------------+----------------+------------+-----------------+---------------+-------------------+-----------------+-----------------+------------+------------+------------+------------+------------+--------+-------------+---------+--------+----+----------------+-----+------------+-----------------+-------------+------------------+--------------------+
only showing top 10 rows


// calculate pearson correlation to check multicolinearity

import org.apache.spark.ml.stat.Correlation
import org.apache.spark.ml.linalg.Matrix
import org.apache.spark.sql.Row

val corr = Correlation.corr(df3, "features", "pearson").head match {
   case Row(coeff: Matrix) => coeff
}
corr: org.apache.spark.ml.linalg.Matrix =
1.0                     -0.5303450910874501    ... (36 total)
-0.5303450910874501     1.0                    ...
-0.4472794833228571     -0.2338115825778216    ...
-0.3172528181897692     -0.1658412385633186    ...
-0.004807155605257219   0.00894939881557397    ...
-0.0073560069020699136  -0.02093579211658608   ...
0.019413239045396324    -0.01668093700595557   ...
0.006374902444844949    0.005873057861513331   ...
-0.016238845556139175   0.04513402397565979    ...
-0.012539108278662567   0.010384985197631818   ...
-2.1701399236926096E-4  -0.015825192013169072  ...
0.018935243286591096    0.0815517565042117     ...
-0.0017390980474105541  -0.043844459114168316  ...
-0.024955700278856813   0.0923422537017747     ...
0.030183926667509714    -0.008...


corr.toDense.rowIter.foreach( x => println(x.toString))
[1.0,-0.5303450910874501,-0.4472794833228571,-0.3172528181897692,-0.004807155605257219,-0.0073560069020699136,0.019413239045396324,0.006374902444844949,-0.016238845556139175,-0.012539108278662567,-2.1701399236926096E-4,0.018935243286591096,-0.0017390980474105541,-0.024955700278856813,0.030183926667509714,-0.05986971661923188,0.11405598128121883,0.060180861031108236,0.1063379225692538,0.10442083177217058,0.13063007414447272,-0.006142099336788043,0.011138128422936353,0.023174479484068915,0.012522222291765354,-0.01416364610864514,0.03127991959379054,0.0069642250057450885,-0.014135509958963685,-0.012384373049493561,0.015308416766912858,0.03189862570634059,NaN,NaN,-0.06857428232017226,0.030094076254660186]
[-0.5303450910874501,1.0,-0.2338115825778216,-0.1658412385633186,0.00894939881557397,-0.02093579211658608,-0.01668093700595557,0.005873057861513331,0.04513402397565979,0.010384985197631818,-0.015825192013169072,0.0815517565042117,-0.043844459114168316,0.0923422537017747,-0.00824827227970275,0.1594503420723105,-0.08219243876897914,0.00643885049850055,-0.10350096722873166,-0.08567628728150256,-0.11751465572976559,0.009886083993862944,0.06670044317405821,0.05695178713895493,0.0440288935228617,-0.014653660569528902,-0.00367517096386861,0.03304239434582023,0.019371450834921852,0.03931709924520064,0.016133964461391516,-0.04020244905435995,NaN,NaN,0.12201061305311381,-0.035106092894965295]
[-0.4472794833228571,-0.2338115825778216,1.0,-0.1398662583000934,-0.00788791265646435,0.021174188210997872,-0.007669347636162938,-0.004820197092523833,-0.010148285174059265,0.016738041359750204,0.02716848126198131,0.01182668616673194,0.01302732960158569,0.023532258908463107,-0.02600415888568007,0.03672190847842509,-0.05559238730306489,-0.008070744505346039,-0.04984551193622509,-0.06727155772177792,-0.032369693211266724,0.02334308710799431,-0.008049239237205033,-0.019094991007967556,0.011843066535162003,-0.020797228678439333,-0.026771880451970872,-0.030965564983635802,-0.013272730055561491,0.018530855236483304,0.001480572721740021,-0.01832015540495505,NaN,NaN,0.06938950523811323,-0.032492159700222546]
[-0.3172528181897692,-0.1658412385633186,-0.1398662583000934,1.0,0.00858058553746136,0.015412899674973323,-0.025056319763224044,0.01060354312871894,-0.016088785867068404,-0.011596839707309882,-0.009466641341541626,-0.05774505687004896,0.019488815418136806,-0.05523846448125546,-0.005470121352105708,-0.09735928696549252,0.023781771690091637,-0.04483100587426986,0.05985482668438991,0.05903277437338539,0.017721875394230983,-0.010408379767541888,-0.03681359466418915,-0.03401819929360844,-0.02335519831630407,0.018309540925322925,0.007614738974716519,-0.009642731863674361,0.0017423340955880808,-0.034900769283492894,-0.027956446495289916,0.0342114412476079,NaN,NaN,-0.08436473221993455,0.008674281422851753]
[-0.004807155605257219,0.00894939881557397,-0.00788791265646435,0.00858058553746136,1.0,-0.46896368303009367,-0.41256598676459394,-0.271552522340643,-0.1496513338426742,-0.02923819801281983,-0.02386749675309143,-0.01647932569504146,0.01793337126681083,0.008275983593519921,-0.019268450792744415,-0.012329648666058443,-0.014117199736337425,-0.02160213333083128,-0.03149314670433935,-0.005365049254956497,-0.01715765117658905,0.024432752932947163,-3.1281004722941006E-5,-0.011106369615414764,0.011846012669641746,0.012067916930178639,0.026803754851419274,-0.03690023756211509,-1.329504085273779E-4,-0.0050411109153968335,0.011922383400636768,-0.0011609813171960038,NaN,NaN,-0.049561376615011116,-0.014727206064905343]
[-0.0073560069020699136,-0.02093579211658608,0.021174188210997872,0.015412899674973323,-0.46896368303009367,1.0,-0.30681124090315925,-0.20194434108125953,-0.11129058844417614,-0.02174344977983868,-0.01774944258855356,0.02342468604412134,0.009323831852067022,0.025378711110262332,0.019933331311882997,0.005798739311341401,-0.012693883672331402,-0.0014463196501689954,0.015375499355117134,-0.011458894764827157,-0.008715776550000975,0.001394572953465082,0.00380968603546832,0.001585166129901934,-0.008235057458305627,-0.010120887984119723,-0.019853535412228535,0.03783889523219248,-0.020322965128058715,-0.001598953428238127,0.008358077578180098,-0.004574776676443828,NaN,NaN,0.05290305313345996,0.004523761312226561]
[0.019413239045396324,-0.01668093700595557,-0.007669347636162938,-0.025056319763224044,-0.41256598676459394,-0.30681124090315925,1.0,-0.17765846133626761,-0.09790675291190398,-0.019128576771924338,-0.01561488993935208,-0.02584309064415533,0.014216746138297485,-0.09944663827213013,0.0033557463915620585,-0.021197732340370118,0.011819263705161858,0.04136497947580775,0.010774026855563116,5.479137358794739E-4,-0.006614239130984832,-0.05184330520443926,-0.04434615435210282,-0.0068060413806813,-0.0197755581440065,-0.008310712941145116,-8.170889468940629E-4,-0.01313729535684794,0.01417700611739918,-0.012039879344374848,-0.014544219657484434,0.017493714616150204,NaN,NaN,-0.11926151079481885,6.022932882591844E-4]
[0.006374902444844949,0.005873057861513331,-0.004820197092523833,0.01060354312871894,-0.271552522340643,-0.20194434108125953,-0.17765846133626761,1.0,-0.06444260205720691,-0.012590502944603062,-0.010277780731163472,0.007975465249288402,-0.017833813394286708,0.053489408761317636,0.005605608434151699,0.020028886584405266,0.009202652942923916,-0.025603551091795056,-0.016208004538051,-0.0017481111093785805,0.015337777134703339,0.019875994311238696,0.02808410053026408,1.6184907630784125E-4,0.0018910246196701239,0.023695768105659668,-0.017252304503464638,0.023713555967450114,0.016572095576405644,0.004675116035087368,-0.022424566761624343,-0.003020723265264208,NaN,NaN,0.07261418897689956,0.007887849260768126]
[-0.016238845556139175,0.04513402397565979,-0.010148285174059265,-0.016088785867068404,-0.1496513338426742,-0.11129058844417614,-0.09790675291190398,-0.06444260205720691,1.0,-0.006938567696478222,-0.005664037226035171,0.03170614047163855,-0.07195229843961944,0.048258417979349544,-0.001367417822526396,0.0346670773858667,0.026110784647406182,0.015407592473754903,0.04224263718965942,0.04974649051339185,0.04325349276261089,0.0031068118551386818,0.0366633029320246,0.04067791645062041,0.032138926980217364,-0.02990845973866509,0.0013159223304830038,-6.196986998741447E-4,-0.015105459472926509,0.04144463524578472,0.013755569281462638,-0.018432841748036,NaN,NaN,0.1581679864714383,0.013224433033839344]
[-0.012539108278662567,0.010384985197631818,0.016738041359750204,-0.011596839707309882,-0.02923819801281983,-0.02174344977983868,-0.019128576771924338,-0.012590502944603062,-0.006938567696478222,1.0,-0.001106613871820868,-0.012374060118562642,0.03828930770446393,0.010912598191772833,-0.02376318987534795,-0.013147164064886776,-0.020689322115695012,-0.023096687874337506,-0.02015895762140543,-0.017958840043329295,-0.012057833722131307,0.025712178127791405,0.012289964862459027,-0.02522092096966978,-0.020402889917924685,0.015401184821590126,-0.009634068204033943,-0.004313258322310321,0.036639768950737284,-0.010408859974120256,-0.010340158788280452,-0.003601324913913762,NaN,NaN,-0.012842359920053819,-0.030051158128114305]
[-2.1701399236926096E-4,-0.015825192013169072,0.02716848126198131,-0.009466641341541626,-0.02386749675309143,-0.01774944258855356,-0.01561488993935208,-0.010277780731163472,-0.005664037226035171,-0.001106613871820868,1.0,0.024025812048577958,-0.024736985553169055,-0.027920868660422267,0.004140819632565419,0.004492362264875119,0.04392503061560077,0.019503045469777224,0.09216730681237177,0.0025406648993166977,0.09284948839426725,-0.005056298732584135,-0.0064193807825912155,0.04960159151944186,0.006464242578735916,-0.04733722963926236,0.0535001214313888,-0.0035209652440908986,-0.008468870989167895,-0.00849687903224303,0.049290088628525616,-0.0029398053413543543,NaN,NaN,-0.015499819950297193,0.0014818942865543123]
[0.018935243286591096,0.0815517565042117,0.01182668616673194,-0.05774505687004896,-0.01647932569504146,0.02342468604412134,-0.02584309064415533,0.007975465249288402,0.03170614047163855,-0.012374060118562642,0.024025812048577958,1.0,-0.4286690079691812,0.019133378179404723,-0.003969755538429429,0.5786497501367361,0.4308416809908748,0.5846333567663247,0.4388713594516409,0.4407437915193647,0.325916446497266,-0.08310089573038662,0.3878778112917951,0.589162441934327,0.5293621402734204,-0.5530880116530876,0.27681986364264555,0.0875447741048558,-0.01617444005862989,0.1844003681745811,0.33594326598852964,-0.02722451231447756,NaN,NaN,0.16179142819633252,-0.018530776603847745]
[-0.0017390980474105541,-0.043844459114168316,0.01302732960158569,0.019488815418136806,0.01793337126681083,0.009323831852067022,0.014216746138297485,-0.017833813394286708,-0.07195229843961944,0.03828930770446393,-0.024736985553169055,-0.4286690079691812,1.0,-0.03986909491269614,0.011492148877609198,-0.4973358580482502,-0.3733961018645454,-0.4392605293302477,-0.3888842203052545,-0.37802612758297277,-0.3550294246411403,0.2169130475866843,-0.37197654934658175,-0.5045006219645857,-0.5013488096627451,0.4474769405544815,-0.17416308346025997,-0.08186792980170478,0.0160660222502954,-0.16202597120826798,-0.2053046007571252,0.040977948951332104,NaN,NaN,-0.2336146167843698,-0.05458271179058226]
[-0.024955700278856813,0.0923422537017747,0.023532258908463107,-0.05523846448125546,0.008275983593519921,0.025378711110262332,-0.09944663827213013,0.053489408761317636,0.048258417979349544,0.010912598191772833,-0.027920868660422267,0.019133378179404723,-0.03986909491269614,1.0,0.013837883216177281,0.003746662683130177,-0.17655763847960257,-0.2611223852337327,-0.20524186650577647,-0.16305577735620397,-0.019887233813667197,0.3862463041034536,0.1620771851599787,-0.11269219774843682,0.04973702442961269,0.13124002195157114,-0.14485535030427132,-0.01552086125656336,-0.042521542415405504,0.03837572759979499,-0.19079132962891873,0.0033069800009131838,NaN,NaN,0.3507905725086711,0.018143933339319625]
[0.030183926667509714,-0.00824827227970275,-0.02600415888568007,-0.005470121352105708,-0.019268450792744415,0.019933331311882997,0.0033557463915620585,0.005605608434151699,-0.001367417822526396,-0.02376318987534795,0.004140819632565419,-0.003969755538429429,0.011492148877609198,0.013837883216177281,1.0,0.015721019423315913,-0.005843749911871639,0.022517635114412814,5.509232351485507E-4,0.025109770310312463,0.01766263773497032,0.002115450811598985,-0.005640853762663828,0.0240814075753086,-4.338265887649448E-4,-0.0185636434017193,-0.021061220855675297,-0.001400382086968626,-0.03225726632386705,0.017566258881346292,-4.819996751676137E-4,0.013636670265467722,NaN,NaN,0.016294899725591692,0.025962587034916502]
[-0.05986971661923188,0.1594503420723105,0.03672190847842509,-0.09735928696549252,-0.012329648666058443,0.005798739311341401,-0.021197732340370118,0.020028886584405266,0.0346670773858667,-0.013147164064886776,0.004492362264875119,0.5786497501367361,-0.4973358580482502,0.003746662683130177,0.015721019423315913,1.0,0.38702386089488017,0.5688600028034911,0.3977210502397397,0.39032580211914447,0.3927309933121954,0.008885928846512908,0.5537859390502027,0.6347527405610142,0.6400119079346179,-0.3219779006408575,0.3514171077786046,0.2061849291907119,0.061463221333321286,0.3731433359055152,0.47355044736086205,-0.03947021117770369,NaN,NaN,0.15945109606670402,0.16804948496348512]
[0.11405598128121883,-0.08219243876897914,-0.05559238730306489,0.023781771690091637,-0.014117199736337425,-0.012693883672331402,0.011819263705161858,0.009202652942923916,0.026110784647406182,-0.020689322115695012,0.04392503061560077,0.4308416809908748,-0.3733961018645454,-0.17655763847960257,-0.005843749911871639,0.38702386089488017,1.0,0.5478221664444247,0.5934310502810899,0.5716060634768739,0.396486924429036,-0.13451209943613282,0.30203884913085705,0.48626307075899494,0.4584910314787392,-0.41872893236745223,0.19181576309463125,-0.00998015240003545,0.014423959637837637,0.006395603242838441,0.21287107479087428,-0.005324098581870897,NaN,NaN,0.01774652021008928,0.06795796815520608]
[0.060180861031108236,0.00643885049850055,-0.008070744505346039,-0.04483100587426986,-0.02160213333083128,-0.0014463196501689954,0.04136497947580775,-0.025603551091795056,0.015407592473754903,-0.023096687874337506,0.019503045469777224,0.5846333567663247,-0.4392605293302477,-0.2611223852337327,0.022517635114412814,0.5688600028034911,0.5478221664444247,1.0,0.5735740153436667,0.535136108711732,0.3594462807188077,-0.12130771413541899,0.30709036563638603,0.7341265978631466,0.486005545284862,-0.5394844166382267,0.31307611216860365,0.04352139945598069,0.018437950940139235,0.09161819640940043,0.37686711847269355,-0.02378194410703906,NaN,NaN,0.03369674544451452,0.08957703328296358]
[0.1063379225692538,-0.10350096722873166,-0.04984551193622509,0.05985482668438991,-0.03149314670433935,0.015375499355117134,0.010774026855563116,-0.016208004538051,0.04224263718965942,-0.02015895762140543,0.09216730681237177,0.4388713594516409,-0.3888842203052545,-0.20524186650577647,5.509232351485507E-4,0.3977210502397397,0.5934310502810899,0.5735740153436667,1.0,0.5838669550256241,0.427142040128509,-0.1432410856417481,0.2996875103759704,0.5327567837134197,0.4577450432042474,-0.4464232917581765,0.2616081098154488,0.002344896997361485,-2.1899209055686435E-4,0.016105384537408285,0.19627745116954465,-0.02122023035141566,NaN,NaN,0.04042508416794668,0.08183444454785904]
[0.10442083177217058,-0.08567628728150256,-0.06727155772177792,0.05903277437338539,-0.005365049254956497,-0.011458894764827157,5.479137358794739E-4,-0.0017481111093785805,0.04974649051339185,-0.017958840043329295,0.0025406648993166977,0.4407437915193647,-0.37802612758297277,-0.16305577735620397,0.025109770310312463,0.39032580211914447,0.5716060634768739,0.535136108711732,0.5838669550256241,1.0,0.3574497473367094,-0.12143192773268319,0.33393721748060917,0.4951358178722878,0.455225163598347,-0.4223708035871353,0.24510196257446296,0.010188061683200364,0.0017804341899788222,0.02931301166534489,0.25922987375328743,-0.022641200181712527,NaN,NaN,0.020204414957438025,0.08098580108592923]
[0.13063007414447272,-0.11751465572976559,-0.032369693211266724,0.017721875394230983,-0.01715765117658905,-0.008715776550000975,-0.006614239130984832,0.015337777134703339,0.04325349276261089,-0.012057833722131307,0.09284948839426725,0.325916446497266,-0.3550294246411403,-0.019887233813667197,0.01766263773497032,0.3927309933121954,0.396486924429036,0.3594462807188077,0.427142040128509,0.3574497473367094,1.0,0.051904829391440054,0.40706566619258694,0.44242825214836623,0.389180172225989,-0.24769055717258842,0.17013156126608653,0.05073361018385331,0.12495786421202776,0.024015092911599336,0.1813973755277105,-0.031133459344138917,NaN,NaN,0.06420769327026647,0.16050486375261508]
[-0.006142099336788043,0.009886083993862944,0.02334308710799431,-0.010408379767541888,0.024432752932947163,0.001394572953465082,-0.05184330520443926,0.019875994311238696,0.0031068118551386818,0.025712178127791405,-0.005056298732584135,-0.08310089573038662,0.2169130475866843,0.3862463041034536,0.002115450811598985,0.008885928846512908,-0.13451209943613282,-0.12130771413541899,-0.1432410856417481,-0.12143192773268319,0.051904829391440054,1.0,0.2414403182543379,-0.01211842803419211,0.06610659381931107,0.3460483799648564,-0.12737389187862516,-0.03798115053624711,-0.02313507999465622,0.016076520490274908,-0.18425294260685632,4.972466506362165E-4,NaN,NaN,0.05866805087262826,0.21849827753333997]
[0.011138128422936353,0.06670044317405821,-0.008049239237205033,-0.03681359466418915,-3.1281004722941006E-5,0.00380968603546832,-0.04434615435210282,0.02808410053026408,0.0366633029320246,0.012289964862459027,-0.0064193807825912155,0.3878778112917951,-0.37197654934658175,0.1620771851599787,-0.005640853762663828,0.5537859390502027,0.30203884913085705,0.30709036563638603,0.2996875103759704,0.33393721748060917,0.40706566619258694,0.2414403182543379,1.0,0.38686764014570135,0.5162401826934705,-0.05122626307503927,0.15929166608926096,0.03482859529009684,0.042957829002435576,0.16293225816517348,0.14118889093609457,-0.01664177904242128,NaN,NaN,0.15305137476703445,0.19276250292161531]
[0.023174479484068915,0.05695178713895493,-0.019094991007967556,-0.03401819929360844,-0.011106369615414764,0.001585166129901934,-0.0068060413806813,1.6184907630784125E-4,0.04067791645062041,-0.02522092096966978,0.04960159151944186,0.589162441934327,-0.5045006219645857,-0.11269219774843682,0.0240814075753086,0.6347527405610142,0.48626307075899494,0.7341265978631466,0.5327567837134197,0.4951358178722878,0.44242825214836623,-0.01211842803419211,0.38686764014570135,1.0,0.5178404511156375,-0.5220037739848129,0.30902571845133747,0.09991528121453738,0.10434509873303155,0.1401819919744614,0.3224705753164756,-0.02083919062181278,NaN,NaN,0.12176397201298249,0.09761060640500505]
[0.012522222291765354,0.0440288935228617,0.011843066535162003,-0.02335519831630407,0.011846012669641746,-0.008235057458305627,-0.0197755581440065,0.0018910246196701239,0.032138926980217364,-0.020402889917924685,0.006464242578735916,0.5293621402734204,-0.5013488096627451,0.04973702442961269,-4.338265887649448E-4,0.6400119079346179,0.4584910314787392,0.486005545284862,0.4577450432042474,0.455225163598347,0.389180172225989,0.06610659381931107,0.5162401826934705,0.5178404511156375,1.0,-0.4323982572659637,0.1787428895679231,0.08527077669680683,-0.06891258923172662,0.1780201902592069,0.21295371021608586,-0.0169407070074343,NaN,NaN,0.12789072181375752,0.11261844733584107]
[-0.01416364610864514,-0.014653660569528902,-0.020797228678439333,0.018309540925322925,0.012067916930178639,-0.010120887984119723,-0.008310712941145116,0.023695768105659668,-0.02990845973866509,0.015401184821590126,-0.04733722963926236,-0.5530880116530876,0.4474769405544815,0.13124002195157114,-0.0185636434017193,-0.3219779006408575,-0.41872893236745223,-0.5394844166382267,-0.4464232917581765,-0.4223708035871353,-0.24769055717258842,0.3460483799648564,-0.05122626307503927,-0.5220037739848129,-0.4323982572659637,1.0,-0.1947731805269381,-0.007361664930896234,0.061307234712589476,-0.02866588963546293,-0.27788310146801837,0.019785005887254254,NaN,NaN,-0.12390393683194713,0.27601640439272135]
[0.03127991959379054,-0.00367517096386861,-0.026771880451970872,0.007614738974716519,0.026803754851419274,-0.019853535412228535,-8.170889468940629E-4,-0.017252304503464638,0.0013159223304830038,-0.009634068204033943,0.0535001214313888,0.27681986364264555,-0.17416308346025997,-0.14485535030427132,-0.021061220855675297,0.3514171077786046,0.19181576309463125,0.31307611216860365,0.2616081098154488,0.24510196257446296,0.17013156126608653,-0.12737389187862516,0.15929166608926096,0.30902571845133747,0.1787428895679231,-0.1947731805269381,1.0,0.17663707327744801,0.09568286876259031,0.24278177008858778,0.407877927952029,-0.02559364732938733,NaN,NaN,0.009610506551184473,-0.03986038573264654]
[0.0069642250057450885,0.03304239434582023,-0.030965564983635802,-0.009642731863674361,-0.03690023756211509,0.03783889523219248,-0.01313729535684794,0.023713555967450114,-6.196986998741447E-4,-0.004313258322310321,-0.0035209652440908986,0.0875447741048558,-0.08186792980170478,-0.01552086125656336,-0.001400382086968626,0.2061849291907119,-0.00998015240003545,0.04352139945598069,0.002344896997361485,0.010188061683200364,0.05073361018385331,-0.03798115053624711,0.03482859529009684,0.09991528121453738,0.08527077669680683,-0.007361664930896234,0.17663707327744801,1.0,0.07170217241720125,0.2950495652265787,0.22212082088409438,-0.011458504341450716,NaN,NaN,0.006716955921569865,0.006123288107552388]
[-0.014135509958963685,0.019371450834921852,-0.013272730055561491,0.0017423340955880808,-1.329504085273779E-4,-0.020322965128058715,0.01417700611739918,0.016572095576405644,-0.015105459472926509,0.036639768950737284,-0.008468870989167895,-0.01617444005862989,0.0160660222502954,-0.042521542415405504,-0.03225726632386705,0.061463221333321286,0.014423959637837637,0.018437950940139235,-2.1899209055686435E-4,0.0017804341899788222,0.12495786421202776,-0.02313507999465622,0.042957829002435576,0.10434509873303155,-0.06891258923172662,0.061307234712589476,0.09568286876259031,0.07170217241720125,1.0,-0.07965858237443756,0.08024761492969104,0.00812411345317045,NaN,NaN,-0.061783800248393556,-0.007661195303360166]
[-0.012384373049493561,0.03931709924520064,0.018530855236483304,-0.034900769283492894,-0.0050411109153968335,-0.001598953428238127,-0.012039879344374848,0.004675116035087368,0.04144463524578472,-0.010408859974120256,-0.00849687903224303,0.1844003681745811,-0.16202597120826798,0.03837572759979499,0.017566258881346292,0.3731433359055152,0.006395603242838441,0.09161819640940043,0.016105384537408285,0.02931301166534489,0.024015092911599336,0.016076520490274908,0.16293225816517348,0.1401819919744614,0.1780201902592069,-0.02866588963546293,0.24278177008858778,0.2950495652265787,-0.07965858237443756,1.0,0.31131449978683456,-0.02765194159275967,NaN,NaN,0.0661085236727933,0.01596588457166773]
[0.015308416766912858,0.016133964461391516,0.001480572721740021,-0.027956446495289916,0.011922383400636768,0.008358077578180098,-0.014544219657484434,-0.022424566761624343,0.013755569281462638,-0.010340158788280452,0.049290088628525616,0.33594326598852964,-0.2053046007571252,-0.19079132962891873,-4.819996751676137E-4,0.47355044736086205,0.21287107479087428,0.37686711847269355,0.19627745116954465,0.25922987375328743,0.1813973755277105,-0.18425294260685632,0.14118889093609457,0.3224705753164756,0.21295371021608586,-0.27788310146801837,0.407877927952029,0.22212082088409438,0.08024761492969104,0.31131449978683456,1.0,-0.00957635092668109,NaN,NaN,-0.010574840069470562,-0.004920361216635264]
[0.03189862570634059,-0.04020244905435995,-0.01832015540495505,0.0342114412476079,-0.0011609813171960038,-0.004574776676443828,0.017493714616150204,-0.003020723265264208,-0.018432841748036,-0.003601324913913762,-0.0029398053413543543,-0.02722451231447756,0.040977948951332104,0.0033069800009131838,0.013636670265467722,-0.03947021117770369,-0.005324098581870897,-0.02378194410703906,-0.02122023035141566,-0.022641200181712527,-0.031133459344138917,4.972466506362165E-4,-0.01664177904242128,-0.02083919062181278,-0.0169407070074343,0.019785005887254254,-0.02559364732938733,-0.011458504341450716,0.00812411345317045,-0.02765194159275967,-0.00957635092668109,1.0,NaN,NaN,0.0304072467018882,0.03327904896614717]
[NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,1.0,NaN,NaN,NaN]
[NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,NaN,1.0,NaN,NaN]
[-0.06857428232017226,0.12201061305311381,0.06938950523811323,-0.08436473221993455,-0.049561376615011116,0.05290305313345996,-0.11926151079481885,0.07261418897689956,0.1581679864714383,-0.012842359920053819,-0.015499819950297193,0.16179142819633252,-0.2336146167843698,0.3507905725086711,0.016294899725591692,0.15945109606670402,0.01774652021008928,0.03369674544451452,0.04042508416794668,0.020204414957438025,0.06420769327026647,0.05866805087262826,0.15305137476703445,0.12176397201298249,0.12789072181375752,-0.12390393683194713,0.009610506551184473,0.006716955921569865,-0.061783800248393556,0.0661085236727933,-0.010574840069470562,0.0304072467018882,NaN,NaN,1.0,-0.0203049216456745]
[0.030094076254660186,-0.035106092894965295,-0.032492159700222546,0.008674281422851753,-0.014727206064905343,0.004523761312226561,6.022932882591844E-4,0.007887849260768126,0.013224433033839344,-0.030051158128114305,0.0014818942865543123,-0.018530776603847745,-0.05458271179058226,0.018143933339319625,0.025962587034916502,0.16804948496348512,0.06795796815520608,0.08957703328296358,0.08183444454785904,0.08098580108592923,0.16050486375261508,0.21849827753333997,0.19276250292161531,0.09761060640500505,0.11261844733584107,0.27601640439272135,-0.03986038573264654,0.006123288107552388,-0.007661195303360166,0.01596588457166773,-0.004920361216635264,0.03327904896614717,NaN,NaN,-0.0203049216456745,1.0]


corr.toDense.rowIter.foreach( x => {
  val size = x.size
  for ( i <- Range(0,size)) { 
    val elem = x(i)
    print(f"$elem%.3f\t") 
  }
  println
})
// "EducationVect","Marital_StatusVect","Income","Kidhome","Teenhome","Recency","MntWines","MntFruits","MntMeatProducts","MntFishProducts","MntSweetProducts","MntGoldProds","NumDealsPurchases","NumWebPurchases","NumCatalogPurchases","NumStorePurchases","NumWebVisitsMonth","AcceptedCmp1","AcceptedCmp2","AcceptedCmp3","AcceptedCmp4","AcceptedCmp5","Complain","Z_CostContact","Z_Revenue","age","enrolled_to_date"
1.000   -0.530  -0.447  -0.317  -0.005  -0.007  0.019   0.006   -0.016  -0.013 -0.000   0.019   -0.002  -0.025  0.030   -0.060  0.114   0.060   0.106   0.104  0.131    -0.006  0.011   0.023   0.013   -0.014  0.031   0.007   -0.014  -0.012 0.015    0.032   NaN     NaN     -0.069  0.030
-0.530  1.000   -0.234  -0.166  0.009   -0.021  -0.017  0.006   0.045   0.010  -0.016   0.082   -0.044  0.092   -0.008  0.159   -0.082  0.006   -0.104  -0.086 -0.118   0.010   0.067   0.057   0.044   -0.015  -0.004  0.033   0.019   0.039  0.016    -0.040  NaN     NaN     0.122   -0.035
-0.447  -0.234  1.000   -0.140  -0.008  0.021   -0.008  -0.005  -0.010  0.017  0.027    0.012   0.013   0.024   -0.026  0.037   -0.056  -0.008  -0.050  -0.067 -0.032   0.023   -0.008  -0.019  0.012   -0.021  -0.027  -0.031  -0.013  0.019  0.001    -0.018  NaN     NaN     0.069   -0.032
-0.317  -0.166  -0.140  1.000   0.009   0.015   -0.025  0.011   -0.016  -0.012 -0.009   -0.058  0.019   -0.055  -0.005  -0.097  0.024   -0.045  0.060   0.059  0.018    -0.010  -0.037  -0.034  -0.023  0.018   0.008   -0.010  0.002   -0.035 -0.028   0.034   NaN     NaN     -0.084  0.009
-0.005  0.009   -0.008  0.009   1.000   -0.469  -0.413  -0.272  -0.150  -0.029 -0.024   -0.016  0.018   0.008   -0.019  -0.012  -0.014  -0.022  -0.031  -0.005 -0.017   0.024   -0.000  -0.011  0.012   0.012   0.027   -0.037  -0.000  -0.005 0.012    -0.001  NaN     NaN     -0.050  -0.015
-0.007  -0.021  0.021   0.015   -0.469  1.000   -0.307  -0.202  -0.111  -0.022 -0.018   0.023   0.009   0.025   0.020   0.006   -0.013  -0.001  0.015   -0.011 -0.009   0.001   0.004   0.002   -0.008  -0.010  -0.020  0.038   -0.020  -0.002 0.008    -0.005  NaN     NaN     0.053   0.005
0.019   -0.017  -0.008  -0.025  -0.413  -0.307  1.000   -0.178  -0.098  -0.019 -0.016   -0.026  0.014   -0.099  0.003   -0.021  0.012   0.041   0.011   0.001  -0.007   -0.052  -0.044  -0.007  -0.020  -0.008  -0.001  -0.013  0.014   -0.012 -0.015   0.017   NaN     NaN     -0.119  0.001
0.006   0.006   -0.005  0.011   -0.272  -0.202  -0.178  1.000   -0.064  -0.013 -0.010   0.008   -0.018  0.053   0.006   0.020   0.009   -0.026  -0.016  -0.002 0.015    0.020   0.028   0.000   0.002   0.024   -0.017  0.024   0.017   0.005  -0.022   -0.003  NaN     NaN     0.073   0.008
-0.016  0.045   -0.010  -0.016  -0.150  -0.111  -0.098  -0.064  1.000   -0.007 -0.006   0.032   -0.072  0.048   -0.001  0.035   0.026   0.015   0.042   0.050  0.043    0.003   0.037   0.041   0.032   -0.030  0.001   -0.001  -0.015  0.041  0.014    -0.018  NaN     NaN     0.158   0.013
-0.013  0.010   0.017   -0.012  -0.029  -0.022  -0.019  -0.013  -0.007  1.000  -0.001   -0.012  0.038   0.011   -0.024  -0.013  -0.021  -0.023  -0.020  -0.018 -0.012   0.026   0.012   -0.025  -0.020  0.015   -0.010  -0.004  0.037   -0.010 -0.010   -0.004  NaN     NaN     -0.013  -0.030
-0.000  -0.016  0.027   -0.009  -0.024  -0.018  -0.016  -0.010  -0.006  -0.001 1.000    0.024   -0.025  -0.028  0.004   0.004   0.044   0.020   0.092   0.003  0.093    -0.005  -0.006  0.050   0.006   -0.047  0.054   -0.004  -0.008  -0.008 0.049    -0.003  NaN     NaN     -0.015  0.001
0.019   0.082   0.012   -0.058  -0.016  0.023   -0.026  0.008   0.032   -0.012 0.024    1.000   -0.429  0.019   -0.004  0.579   0.431   0.585   0.439   0.441  0.326    -0.083  0.388   0.589   0.529   -0.553  0.277   0.088   -0.016  0.184  0.336    -0.027  NaN     NaN     0.162   -0.019
-0.002  -0.044  0.013   0.019   0.018   0.009   0.014   -0.018  -0.072  0.038  -0.025   -0.429  1.000   -0.040  0.011   -0.497  -0.373  -0.439  -0.389  -0.378 -0.355   0.217   -0.372  -0.505  -0.501  0.447   -0.174  -0.082  0.016   -0.162 -0.205   0.041   NaN     NaN     -0.234  -0.055
-0.025  0.092   0.024   -0.055  0.008   0.025   -0.099  0.053   0.048   0.011  -0.028   0.019   -0.040  1.000   0.014   0.004   -0.177  -0.261  -0.205  -0.163 -0.020   0.386   0.162   -0.113  0.050   0.131   -0.145  -0.016  -0.043  0.038  -0.191   0.003   NaN     NaN     0.351   0.018
0.030   -0.008  -0.026  -0.005  -0.019  0.020   0.003   0.006   -0.001  -0.024 0.004    -0.004  0.011   0.014   1.000   0.016   -0.006  0.023   0.001   0.025  0.018    0.002   -0.006  0.024   -0.000  -0.019  -0.021  -0.001  -0.032  0.018  -0.000   0.014   NaN     NaN     0.016   0.026
-0.060  0.159   0.037   -0.097  -0.012  0.006   -0.021  0.020   0.035   -0.013 0.004    0.579   -0.497  0.004   0.016   1.000   0.387   0.569   0.398   0.390  0.393    0.009   0.554   0.635   0.640   -0.322  0.351   0.206   0.061   0.373  0.474    -0.039  NaN     NaN     0.159   0.168
0.114   -0.082  -0.056  0.024   -0.014  -0.013  0.012   0.009   0.026   -0.021 0.044    0.431   -0.373  -0.177  -0.006  0.387   1.000   0.548   0.593   0.572  0.396    -0.135  0.302   0.486   0.458   -0.419  0.192   -0.010  0.014   0.006  0.213    -0.005  NaN     NaN     0.018   0.068
0.060   0.006   -0.008  -0.045  -0.022  -0.001  0.041   -0.026  0.015   -0.023 0.020    0.585   -0.439  -0.261  0.023   0.569   0.548   1.000   0.574   0.535  0.359    -0.121  0.307   0.734   0.486   -0.539  0.313   0.044   0.018   0.092  0.377    -0.024  NaN     NaN     0.034   0.090
0.106   -0.104  -0.050  0.060   -0.031  0.015   0.011   -0.016  0.042   -0.020 0.092    0.439   -0.389  -0.205  0.001   0.398   0.593   0.574   1.000   0.584  0.427    -0.143  0.300   0.533   0.458   -0.446  0.262   0.002   -0.000  0.016  0.196    -0.021  NaN     NaN     0.040   0.082
0.104   -0.086  -0.067  0.059   -0.005  -0.011  0.001   -0.002  0.050   -0.018 0.003    0.441   -0.378  -0.163  0.025   0.390   0.572   0.535   0.584   1.000  0.357    -0.121  0.334   0.495   0.455   -0.422  0.245   0.010   0.002   0.029  0.259    -0.023  NaN     NaN     0.020   0.081
0.131   -0.118  -0.032  0.018   -0.017  -0.009  -0.007  0.015   0.043   -0.012 0.093    0.326   -0.355  -0.020  0.018   0.393   0.396   0.359   0.427   0.357  1.000    0.052   0.407   0.442   0.389   -0.248  0.170   0.051   0.125   0.024  0.181    -0.031  NaN     NaN     0.064   0.161
-0.006  0.010   0.023   -0.010  0.024   0.001   -0.052  0.020   0.003   0.026  -0.005   -0.083  0.217   0.386   0.002   0.009   -0.135  -0.121  -0.143  -0.121 0.052    1.000   0.241   -0.012  0.066   0.346   -0.127  -0.038  -0.023  0.016  -0.184   0.000   NaN     NaN     0.059   0.218
0.011   0.067   -0.008  -0.037  -0.000  0.004   -0.044  0.028   0.037   0.012  -0.006   0.388   -0.372  0.162   -0.006  0.554   0.302   0.307   0.300   0.334  0.407    0.241   1.000   0.387   0.516   -0.051  0.159   0.035   0.043   0.163  0.141    -0.017  NaN     NaN     0.153   0.193
0.023   0.057   -0.019  -0.034  -0.011  0.002   -0.007  0.000   0.041   -0.025 0.050    0.589   -0.505  -0.113  0.024   0.635   0.486   0.734   0.533   0.495  0.442    -0.012  0.387   1.000   0.518   -0.522  0.309   0.100   0.104   0.140  0.322    -0.021  NaN     NaN     0.122   0.098
0.013   0.044   0.012   -0.023  0.012   -0.008  -0.020  0.002   0.032   -0.020 0.006    0.529   -0.501  0.050   -0.000  0.640   0.458   0.486   0.458   0.455  0.389    0.066   0.516   0.518   1.000   -0.432  0.179   0.085   -0.069  0.178  0.213    -0.017  NaN     NaN     0.128   0.113
-0.014  -0.015  -0.021  0.018   0.012   -0.010  -0.008  0.024   -0.030  0.015  -0.047   -0.553  0.447   0.131   -0.019  -0.322  -0.419  -0.539  -0.446  -0.422 -0.248   0.346   -0.051  -0.522  -0.432  1.000   -0.195  -0.007  0.061   -0.029 -0.278   0.020   NaN     NaN     -0.124  0.276
0.031   -0.004  -0.027  0.008   0.027   -0.020  -0.001  -0.017  0.001   -0.010 0.054    0.277   -0.174  -0.145  -0.021  0.351   0.192   0.313   0.262   0.245  0.170    -0.127  0.159   0.309   0.179   -0.195  1.000   0.177   0.096   0.243  0.408    -0.026  NaN     NaN     0.010   -0.040
0.007   0.033   -0.031  -0.010  -0.037  0.038   -0.013  0.024   -0.001  -0.004 -0.004   0.088   -0.082  -0.016  -0.001  0.206   -0.010  0.044   0.002   0.010  0.051    -0.038  0.035   0.100   0.085   -0.007  0.177   1.000   0.072   0.295  0.222    -0.011  NaN     NaN     0.007   0.006
-0.014  0.019   -0.013  0.002   -0.000  -0.020  0.014   0.017   -0.015  0.037  -0.008   -0.016  0.016   -0.043  -0.032  0.061   0.014   0.018   -0.000  0.002  0.125    -0.023  0.043   0.104   -0.069  0.061   0.096   0.072   1.000   -0.080 0.080    0.008   NaN     NaN     -0.062  -0.008
-0.012  0.039   0.019   -0.035  -0.005  -0.002  -0.012  0.005   0.041   -0.010 -0.008   0.184   -0.162  0.038   0.018   0.373   0.006   0.092   0.016   0.029  0.024    0.016   0.163   0.140   0.178   -0.029  0.243   0.295   -0.080  1.000  0.311    -0.028  NaN     NaN     0.066   0.016
0.015   0.016   0.001   -0.028  0.012   0.008   -0.015  -0.022  0.014   -0.010 0.049    0.336   -0.205  -0.191  -0.000  0.474   0.213   0.377   0.196   0.259  0.181    -0.184  0.141   0.322   0.213   -0.278  0.408   0.222   0.080   0.311  1.000    -0.010  NaN     NaN     -0.011  -0.005
0.032   -0.040  -0.018  0.034   -0.001  -0.005  0.017   -0.003  -0.018  -0.004 -0.003   -0.027  0.041   0.003   0.014   -0.039  -0.005  -0.024  -0.021  -0.023 -0.031   0.000   -0.017  -0.021  -0.017  0.020   -0.026  -0.011  0.008   -0.028 -0.010   1.000   NaN     NaN     0.030   0.033
NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN    NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN    NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN    NaN      NaN     1.000   NaN     NaN     NaN
NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN    NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN    NaN      NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN     NaN    NaN      NaN     NaN     1.000   NaN     NaN
-0.069  0.122   0.069   -0.084  -0.050  0.053   -0.119  0.073   0.158   -0.013 -0.015   0.162   -0.234  0.351   0.016   0.159   0.018   0.034   0.040   0.020  0.064    0.059   0.153   0.122   0.128   -0.124  0.010   0.007   -0.062  0.066  -0.011   0.030   NaN     NaN     1.000   -0.020
0.030   -0.035  -0.032  0.009   -0.015  0.005   0.001   0.008   0.013   -0.030 0.001    -0.019  -0.055  0.018   0.026   0.168   0.068   0.090   0.082   0.081  0.161    0.218   0.193   0.098   0.113   0.276   -0.040  0.006   -0.008  0.016  -0.005   0.033   NaN     NaN     -0.020  1.000

// there is NO evidence of multicolinearity


// ----- building the logistic regression model

import org.apache.spark.ml.feature.StandardScaler
val stdScaler = new StandardScaler().
setWithStd(true).
setWithMean(true).
setInputCol("features").
setOutputCol("scaledFeatures")

import org.apache.spark.ml.classification.LogisticRegression
val lr = new LogisticRegression()
lr.setRegParam(0.01).setMaxIter(500).setFitIntercept(true).setFeaturesCol("scaledFeatures")

import org.apache.spark.ml.Pipeline

val pipeline = new Pipeline().setStages(Array(dfInd1,dfInd2,dfOne1,dfOne2,va,stdScaler,lr))
 
val Array(trainingData, testData) = df2.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
testData.cache

val model = pipeline.fit(trainingData)

-- collecting feature importance

import org.apache.spark.ml.classification.LogisticRegressionModel

val lrmodel = model.stages.last.asInstanceOf[LogisticRegressionModel]

val featureImp = va.getInputCols.zip(lrmodel.coefficients.toArray)

val columns = Array("feature", "Importance")
val featureImpDF = spark.createDataFrame(featureImp).toDF(columns: _*)

featureImpDF.orderBy($"Importance".desc).show()
+------------------+--------------------+
|           feature|          Importance|
+------------------+--------------------+
|      AcceptedCmp1|  0.4220719508936333|
|  enrolled_to_date|  0.4140256811085162|
|Marital_StatusVect|  0.3388248781972571|
|               age| 0.30317171621560207|
|          MntWines| 0.25163933763617663|
|          Complain|  0.2191685505749573|
|      AcceptedCmp4| 0.14740708547655895|
|         MntFruits| 0.14667611078621914|
|   MntMeatProducts|   0.141525088306989|
| NumDealsPurchases| 0.13273367738031774|
|     Z_CostContact| 0.11966371066443807|
|            Income|  0.1097751916896697|
|      AcceptedCmp5| 0.10049143490875519|
| NumStorePurchases| 0.05638318348904393|
|   MntFishProducts|0.050766644768231325|
|      MntGoldProds|0.030929487784573675|
|     EducationVect|0.028845621664360103|
|  MntSweetProducts|  0.0270483959656669|
| NumWebVisitsMonth|0.025683982567522204|
|      AcceptedCmp3|0.010365662309614944|
+------------------+--------------------+
only showing top 20 rows


import org.apache.spark.ml.classification.BinaryLogisticRegressionSummary

val trainingSummary = lrmodel.summary

trainingSummary.objectiveHistory
res10: Array[Double] = Array(0.4412277687383864, 0.4128795633260116, 0.31614441668146137, 0.29589482881206947, 0.2879331329485013, 0.2740405815974999, 0.2721056677940921, 0.270572223418258, 0.2705218157520537, 0.27048431899292463, 0.2704404063975788, 0.2704116127228023, 0.2704039836908675, 0.2704018971645889, 0.2704014808661234, 0.27040134015291245, 0.2704012889226973, 0.2704012720969234, 0.2704012676465072, 0.2704012663381456, 0.27040126524262337, 0.27040126495994427, 0.2704012647230112, 0.27040126455958213, 0.2704012644724772, 0.2704012644208003, 0.27040126441296136, 0.2704012644116766)

val binarySummary = trainingSummary.asInstanceOf[BinaryLogisticRegressionSummary]

binarySummary.areaUnderROC
res11: Double = 0.9112649719664255

binarySummary.accuracy
res12: Double = 0.8975826972010178


-- collecting metric performance

val pred = model.transform(testData)

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator
val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res13: Double = 0.8921985815602869

bceval.setMetricName("areaUnderPR").evaluate(pred)
res14: Double = 0.5684198143079666


val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res15: org.apache.spark.mllib.linalg.Matrix =
541.0  45.0
23.0   35.0


// ----- logistic regression model hyperparameter tunning

import org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}

val paramGrid = new ParamGridBuilder().
addGrid(lr.regParam, Array(1, 0.1, 0.01)).
addGrid(lr.fitIntercept).
addGrid(lr.maxIter, Array(100,300,500)).build()

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator

val cv = new CrossValidator().
setEstimator(pipeline).
setEvaluator(new BinaryClassificationEvaluator).
setEstimatorParamMaps(paramGrid).
setNumFolds(3)

val cvmodel = cv.fit(trainingData)

-- CV hyperparameter evaluation

cvmodel.getEstimatorParamMaps.zip(cvmodel.avgMetrics)
res17: Array[(org.apache.spark.ml.param.ParamMap, Double)] =
Array(({
        logreg_d0375812b037-fitIntercept: true,
        logreg_d0375812b037-maxIter: 100,
        logreg_d0375812b037-regParam: 1.0
},0.8345473494893922), ({
        logreg_d0375812b037-fitIntercept: true,
        logreg_d0375812b037-maxIter: 300,
        logreg_d0375812b037-regParam: 1.0
},0.8345473494893922), ({
        logreg_d0375812b037-fitIntercept: true,
        logreg_d0375812b037-maxIter: 500,
        logreg_d0375812b037-regParam: 1.0
},0.8345473494893922), ({
        logreg_d0375812b037-fitIntercept: true,
        logreg_d0375812b037-maxIter: 100,
        logreg_d0375812b037-regParam: 0.1
},0.8902543126010336), ({
        logreg_d0375812b037-fitIntercept: true,
        logreg_d0375812b037-maxIter: 300,
        logreg_d0375812b037-regParam: 0.1
},0.8902543126010336), ({
        logreg_d0375812b037-fitIntercept: true,
        ...

-- extract best LR model 

import org.apache.spark.ml.PipelineModel
val bestmodel = cvmodel.bestModel.asInstanceOf[PipelineModel]

import org.apache.spark.ml.classification.LogisticRegressionModel
val lrmodel = bestmodel.stages.last.asInstanceOf[LogisticRegressionModel]

lrmodel.getRegParam
res1: Double = 0.01

lrmodel.getMaxIter
res2: Int = 100

lrmodel.getThreshold
res3: Double = 0.5

lrmodel.getFitIntercept
res4: Boolean = true

lrmodel.getStandardization
res5: Boolean = true

-- collecting feature importance

val featureImp = va.getInputCols.zip(lrmodel.coefficients.toArray)

val columns = Array("feature", "Importance")
val featureImpDF = spark.createDataFrame(featureImp).toDF(columns: _*)

featureImpDF.orderBy($"Importance".desc).show()
+------------------+--------------------+
|           feature|          Importance|
+------------------+--------------------+
|      AcceptedCmp1|  0.4220719508936333|
|  enrolled_to_date|  0.4140256811085162|
|Marital_StatusVect|  0.3388248781972571|
|               age| 0.30317171621560207|
|          MntWines| 0.25163933763617663|
|          Complain|  0.2191685505749573|
|      AcceptedCmp4| 0.14740708547655895|
|         MntFruits| 0.14667611078621914|
|   MntMeatProducts|   0.141525088306989|
| NumDealsPurchases| 0.13273367738031774|
|     Z_CostContact| 0.11966371066443807|
|            Income|  0.1097751916896697|
|      AcceptedCmp5| 0.10049143490875519|
| NumStorePurchases| 0.05638318348904393|
|   MntFishProducts|0.050766644768231325|
|      MntGoldProds|0.030929487784573675|
|     EducationVect|0.028845621664360103|
|  MntSweetProducts|  0.0270483959656669|
| NumWebVisitsMonth|0.025683982567522204|
|      AcceptedCmp3|0.010365662309614944|
+------------------+--------------------+
only showing top 20 rows


import org.apache.spark.ml.classification.BinaryLogisticRegressionSummary

val trainingSummary = lrmodel.summary

trainingSummary.objectiveHistory
res21: Array[Double] = Array(0.4412277687383864, 0.4128795633260116, 0.31614441668146137, 0.29589482881206947, 0.2879331329485013, 0.2740405815974999, 0.2721056677940921, 0.270572223418258, 0.2705218157520537, 0.27048431899292463, 0.2704404063975788, 0.2704116127228023, 0.2704039836908675, 0.2704018971645889, 0.2704014808661234, 0.27040134015291245, 0.2704012889226973, 0.2704012720969234, 0.2704012676465072, 0.2704012663381456, 0.27040126524262337, 0.27040126495994427, 0.2704012647230112, 0.27040126455958213, 0.2704012644724772, 0.2704012644208003, 0.27040126441296136, 0.2704012644116766)

val binarySummary = trainingSummary.asInstanceOf[BinaryLogisticRegressionSummary]

binarySummary.areaUnderROC
res22: Double = 0.9112649719664255

binarySummary.accuracy
res23: Double = 0.8975826972010178

-- collecting metric performance

val pred = bestmodel.transform(testData)

val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res24: Double = 0.8921985815602869

bceval.setMetricName("areaUnderPR").evaluate(pred)
res25: Double = 0.5684198143079666


val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res26: org.apache.spark.mllib.linalg.Matrix =
541.0  45.0
23.0   35.0