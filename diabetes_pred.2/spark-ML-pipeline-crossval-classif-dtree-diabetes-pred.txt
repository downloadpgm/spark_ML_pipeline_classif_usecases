
val df = spark.read.format("csv").option("header","true").option("inferSchema","true").load("diabetes_pred/diabetes_data_upload.csv")

df.printSchema
root
 |-- Age: integer (nullable = true)
 |-- Gender: string (nullable = true)
 |-- Polyuria: string (nullable = true)
 |-- Polydipsia: string (nullable = true)
 |-- sudden weight loss: string (nullable = true)
 |-- weakness: string (nullable = true)
 |-- Polyphagia: string (nullable = true)
 |-- Genital thrush: string (nullable = true)
 |-- visual blurring: string (nullable = true)
 |-- Itching: string (nullable = true)
 |-- Irritability: string (nullable = true)
 |-- delayed healing: string (nullable = true)
 |-- partial paresis: string (nullable = true)
 |-- muscle stiffness: string (nullable = true)
 |-- Alopecia: string (nullable = true)
 |-- Obesity: string (nullable = true)
 |-- class: string (nullable = true)

df.show(10)
+---+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
|Age|Gender|Polyuria|Polydipsia|sudden weight loss|weakness|Polyphagia|Genital thrush|visual blurring|Itching|Irritability|delayed healing|partial paresis|muscle stiffness|Alopecia|Obesity|   class|
+---+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
| 40|  Male|      No|       Yes|                No|     Yes|        No|            No|             No|    Yes|          No|            Yes|             No|             Yes|     Yes|    Yes|Positive|
| 58|  Male|      No|        No|                No|     Yes|        No|            No|            Yes|     No|          No|             No|            Yes|              No|     Yes|     No|Positive|
| 41|  Male|     Yes|        No|                No|     Yes|       Yes|            No|             No|    Yes|          No|            Yes|             No|             Yes|     Yes|     No|Positive|
| 45|  Male|      No|        No|               Yes|     Yes|       Yes|           Yes|             No|    Yes|          No|            Yes|             No|              No|      No|     No|Positive|
| 60|  Male|     Yes|       Yes|               Yes|     Yes|       Yes|            No|            Yes|    Yes|         Yes|            Yes|            Yes|             Yes|     Yes|    Yes|Positive|
| 55|  Male|     Yes|       Yes|                No|     Yes|       Yes|            No|            Yes|    Yes|          No|            Yes|             No|             Yes|     Yes|    Yes|Positive|
| 57|  Male|     Yes|       Yes|                No|     Yes|       Yes|           Yes|             No|     No|          No|            Yes|            Yes|              No|      No|     No|Positive|
| 66|  Male|     Yes|       Yes|               Yes|     Yes|        No|            No|            Yes|    Yes|         Yes|             No|            Yes|             Yes|      No|     No|Positive|
| 67|  Male|     Yes|       Yes|                No|     Yes|       Yes|           Yes|             No|    Yes|         Yes|             No|            Yes|             Yes|      No|    Yes|Positive|
| 70|  Male|      No|       Yes|               Yes|     Yes|       Yes|            No|            Yes|    Yes|         Yes|             No|             No|              No|     Yes|     No|Positive|
+---+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
only showing top 10 rows

df.describe().show
+-------+------------------+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
|summary|               Age|Gender|Polyuria|Polydipsia|sudden weight loss|weakness|Polyphagia|Genital thrush|visual blurring|Itching|Irritability|delayed healing|partial paresis|muscle stiffness|Alopecia|Obesity|   class|
+-------+------------------+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
|  count|               520|   520|     520|       520|               520|     520|       520|           520|            520|    520|         520|            520|            520|             520|     520|    520|     520|
|   mean| 48.02884615384615|  null|    null|      null|              null|    null|      null|          null|           null|   null|        null|           null|           null|            null|    null|   null|    null|
| stddev|12.151465995249454|  null|    null|      null|              null|    null|      null|          null|           null|   null|        null|           null|           null|            null|    null|   null|    null|
|    min|                16|Female|      No|        No|                No|      No|        No|            No|             No|     No|          No|             No|             No|              No|      No|     No|Negative|
|    max|                90|  Male|     Yes|       Yes|               Yes|     Yes|       Yes|           Yes|            Yes|    Yes|         Yes|            Yes|            Yes|             Yes|     Yes|    Yes|Positive|
+-------+------------------+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+

val df1 = df.na.replace(Array("Polyuria","Polydipsia","sudden weight loss","weakness","Polyphagia","Genital thrush","visual blurring","Itching","Irritability","delayed healing","partial paresis","muscle stiffness","Alopecia","Obesity"),Map("No" -> "0.0", "Yes" -> "1.0")).
      na.replace(Array("class"),Map("Negative" -> "0.0", "Positive" -> "1.0")).
      na.replace(Array("Gender"),Map("Female" -> "0.0", "Male" -> "1.0")).
      withColumn("label", 'class)
	  
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

val types = df1.dtypes
types: Array[(String, String)] = Array((Age,IntegerType), (Gender,StringType), (Polyuria,StringType), (Polydipsia,StringType), (sudden weight loss,StringType), (weakness,StringType), (Polyphagia,StringType), (Genital thrush,StringType), (visual blurring,StringType), (Itching,StringType), (Irritability,StringType), (delayed healing,StringType), (partial paresis,StringType), (muscle stiffness,StringType), (Alopecia,StringType), (Obesity,StringType), (class,StringType), (label,StringType))

df1.select(types.map{ case(c,t) => col(c).cast(DoubleType)}: _*)
res13: org.apache.spark.sql.DataFrame = [Age: double, Gender: double ... 16 more fields]

val df2 = df1.select(types.map{ case(c,t) => col(c).cast(DoubleType)}: _*)
df2: org.apache.spark.sql.DataFrame = [Age: double, Gender: double ... 16 more fields]

df2.printSchema
root
 |-- Age: double (nullable = true)
 |-- Gender: double (nullable = true)
 |-- Polyuria: double (nullable = true)
 |-- Polydipsia: double (nullable = true)
 |-- sudden weight loss: double (nullable = true)
 |-- weakness: double (nullable = true)
 |-- Polyphagia: double (nullable = true)
 |-- Genital thrush: double (nullable = true)
 |-- visual blurring: double (nullable = true)
 |-- Itching: double (nullable = true)
 |-- Irritability: double (nullable = true)
 |-- delayed healing: double (nullable = true)
 |-- partial paresis: double (nullable = true)
 |-- muscle stiffness: double (nullable = true)
 |-- Alopecia: double (nullable = true)
 |-- Obesity: double (nullable = true)
 |-- class: double (nullable = true)
 |-- label: double (nullable = true)


import org.apache.spark.ml.feature.{VectorAssembler}

val va = new VectorAssembler().setOutputCol("features").setInputCols(Array("Age","Gender","Polyuria","Polydipsia","sudden weight loss","weakness","Polyphagia","Genital thrush","visual blurring","Itching","Irritability","delayed healing","partial paresis","muscle stiffness","Alopecia","Obesity"))

-------------------

import org.apache.spark.ml.classification.DecisionTreeClassifier
val dt = new DecisionTreeClassifier

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(va, dt))

val Array(trainingData, testData) = df2.randomSplit(Array(0.7,0.3),11L)

trainingData.cache
testData.cache

val model = pipeline.fit(trainingData)

val pred = model.transform(testData)

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator
val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res7: Double = 0.9532453245324533

bceval.setMetricName("areaUnderPR").evaluate(pred)
res8: Double = 0.9827007130503322

df2.groupBy("label").count.show
+-----+-----+
|label|count|
+-----+-----+
|  0.0|  200|
|  1.0|  320|
+-----+-----+

val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res10: org.apache.spark.mllib.linalg.Matrix =
54.0  8.0
0.0   93.0

import org.apache.spark.ml.classification.DecisionTreeClassificationModel

val dtmodel = model.stages(1).asInstanceOf[DecisionTreeClassificationModel]

println(s"Learned classification tree model:\n ${dtmodel.toDebugString}")
Learned classification tree model:
 DecisionTreeClassificationModel (uid=dtc_678a749ff467) of depth 5 with 37 nodes
  If (feature 3 <= 0.5)
   If (feature 2 <= 0.5)
    If (feature 1 <= 0.5)
     If (feature 14 <= 0.5)
      If (feature 0 <= 34.5)
       Predict: 0.0
      Else (feature 0 > 34.5)
       Predict: 1.0
     Else (feature 14 > 0.5)
      If (feature 0 <= 28.5)
       Predict: 1.0
      Else (feature 0 > 28.5)
       Predict: 0.0
    Else (feature 1 > 0.5)
     If (feature 10 <= 0.5)
      If (feature 0 <= 65.5)
       Predict: 0.0
      Else (feature 0 > 65.5)
       Predict: 0.0
     Else (feature 10 > 0.5)
      If (feature 7 <= 0.5)
       Predict: 0.0
      Else (feature 7 > 0.5)
       Predict: 1.0
   Else (feature 2 > 0.5)
    If (feature 0 <= 63.5)
     If (feature 15 <= 0.5)
      Predict: 1.0
     Else (feature 15 > 0.5)
      If (feature 13 <= 0.5)
       Predict: 0.0
      Else (feature 13 > 0.5)
       Predict: 1.0
    Else (feature 0 > 63.5)
     If (feature 4 <= 0.5)
      Predict: 0.0
     Else (feature 4 > 0.5)
      Predict: 1.0
  Else (feature 3 > 0.5)
   If (feature 2 <= 0.5)
    If (feature 10 <= 0.5)
     If (feature 13 <= 0.5)
      If (feature 0 <= 47.5)
       Predict: 1.0
      Else (feature 0 > 47.5)
       Predict: 1.0
     Else (feature 13 > 0.5)
      If (feature 0 <= 58.5)
       Predict: 0.0
      Else (feature 0 > 58.5)
       Predict: 1.0
    Else (feature 10 > 0.5)
     Predict: 1.0
   Else (feature 2 > 0.5)
    Predict: 1.0

-------------------

import org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}

val paramGrid = new ParamGridBuilder().
addGrid(dt.maxBins, Array(32, 48, 64)).
addGrid(dt.impurity, Array("gini", "entropy")).
addGrid(dt.maxDepth, Array(10,20,30)).build()

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator

val cv = new CrossValidator().
setEstimator(pipeline).
setEvaluator(new BinaryClassificationEvaluator).
setEstimatorParamMaps(paramGrid).
setNumFolds(3)

val model = cv.fit(trainingData)

import org.apache.spark.ml.PipelineModel
val bestmodel = model.bestModel.asInstanceOf[PipelineModel]

import org.apache.spark.ml.classification.DecisionTreeClassificationModel
val dtmodel = bestmodel.stages(1).asInstanceOf[DecisionTreeClassificationModel]

dtmodel.getMaxBins
res0: Int = 32

dtmodel.getImpurity
res2: String = entropy

dtmodel.getMaxDepth
res3: Int = 10

val pred = bestmodel.transform(testData)

val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res15: Double = 0.9711221122112211

bceval.setMetricName("areaUnderPR").evaluate(pred)
res16: Double = 0.9890935162064594

df2.groupBy("label").count.show
+-----+-----+
|label|count|
+-----+-----+
|  0.0|  200|
|  1.0|  320|
+-----+-----+

val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res17: org.apache.spark.mllib.linalg.Matrix =
51.0  5.0
3.0   96.0

println(s"Learned classification tree model:\n ${dtmodel.toDebugString}")
Learned classification tree model:
 DecisionTreeClassificationModel (uid=dtc_678a749ff467) of depth 8 with 57 nodes
  If (feature 3 <= 0.5)
   If (feature 2 <= 0.5)
    If (feature 1 <= 0.5)
     If (feature 14 <= 0.5)
      If (feature 0 <= 34.5)
       If (feature 8 <= 0.5)
        Predict: 0.0
       Else (feature 8 > 0.5)
        Predict: 1.0
      Else (feature 0 > 34.5)
       If (feature 10 <= 0.5)
        Predict: 1.0
       Else (feature 10 > 0.5)
        Predict: 0.0
     Else (feature 14 > 0.5)
      If (feature 0 <= 28.5)
       Predict: 1.0
      Else (feature 0 > 28.5)
       Predict: 0.0
    Else (feature 1 > 0.5)
     If (feature 10 <= 0.5)
      If (feature 14 <= 0.5)
       Predict: 0.0
      Else (feature 14 > 0.5)
       If (feature 9 <= 0.5)
        If (feature 0 <= 43.5)
         If (feature 0 <= 37.5)
          Predict: 1.0
         Else (feature 0 > 37.5)
          Predict: 0.0
        Else (feature 0 > 43.5)
         Predict: 1.0
       Else (feature 9 > 0.5)
        Predict: 0.0
     Else (feature 10 > 0.5)
      If (feature 7 <= 0.5)
       If (feature 0 <= 42.5)
        If (feature 0 <= 40.5)
         Predict: 0.0
        Else (feature 0 > 40.5)
         Predict: 1.0
       Else (feature 0 > 42.5)
        Predict: 0.0
      Else (feature 7 > 0.5)
       Predict: 1.0
   Else (feature 2 > 0.5)
    If (feature 11 <= 0.5)
     Predict: 1.0
    Else (feature 11 > 0.5)
     If (feature 14 <= 0.5)
      Predict: 1.0
     Else (feature 14 > 0.5)
      If (feature 15 <= 0.5)
       If (feature 0 <= 71.0)
        If (feature 5 <= 0.5)
         If (feature 0 <= 40.5)
          Predict: 1.0
         Else (feature 0 > 40.5)
          Predict: 0.0
        Else (feature 5 > 0.5)
         Predict: 1.0
       Else (feature 0 > 71.0)
        Predict: 0.0
      Else (feature 15 > 0.5)
       Predict: 0.0
  Else (feature 3 > 0.5)
   If (feature 2 <= 0.5)
    If (feature 10 <= 0.5)
     If (feature 13 <= 0.5)
      If (feature 0 <= 47.5)
       Predict: 1.0
      Else (feature 0 > 47.5)
       If (feature 0 <= 49.5)
        Predict: 0.0
       Else (feature 0 > 49.5)
        Predict: 1.0
     Else (feature 13 > 0.5)
      If (feature 0 <= 58.5)
       Predict: 0.0
      Else (feature 0 > 58.5)
       Predict: 1.0
    Else (feature 10 > 0.5)
     Predict: 1.0
   Else (feature 2 > 0.5)
    Predict: 1.0
