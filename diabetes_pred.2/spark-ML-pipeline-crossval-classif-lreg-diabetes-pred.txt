---- Exploratory Data Analysis --------------

val df = spark.read.format("csv").option("header","true").option("inferSchema","true").load("diabetes_pred/diabetes_data_upload.csv")

df.printSchema
root
 |-- Age: integer (nullable = true)
 |-- Gender: string (nullable = true)
 |-- Polyuria: string (nullable = true)
 |-- Polydipsia: string (nullable = true)
 |-- sudden weight loss: string (nullable = true)
 |-- weakness: string (nullable = true)
 |-- Polyphagia: string (nullable = true)
 |-- Genital thrush: string (nullable = true)
 |-- visual blurring: string (nullable = true)
 |-- Itching: string (nullable = true)
 |-- Irritability: string (nullable = true)
 |-- delayed healing: string (nullable = true)
 |-- partial paresis: string (nullable = true)
 |-- muscle stiffness: string (nullable = true)
 |-- Alopecia: string (nullable = true)
 |-- Obesity: string (nullable = true)
 |-- class: string (nullable = true)

df.show(10)
+---+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
|Age|Gender|Polyuria|Polydipsia|sudden weight loss|weakness|Polyphagia|Genital thrush|visual blurring|Itching|Irritability|delayed healing|partial paresis|muscle stiffness|Alopecia|Obesity|   class|
+---+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
| 40|  Male|      No|       Yes|                No|     Yes|        No|            No|             No|    Yes|          No|            Yes|             No|             Yes|     Yes|    Yes|Positive|
| 58|  Male|      No|        No|                No|     Yes|        No|            No|            Yes|     No|          No|             No|            Yes|              No|     Yes|     No|Positive|
| 41|  Male|     Yes|        No|                No|     Yes|       Yes|            No|             No|    Yes|          No|            Yes|             No|             Yes|     Yes|     No|Positive|
| 45|  Male|      No|        No|               Yes|     Yes|       Yes|           Yes|             No|    Yes|          No|            Yes|             No|              No|      No|     No|Positive|
| 60|  Male|     Yes|       Yes|               Yes|     Yes|       Yes|            No|            Yes|    Yes|         Yes|            Yes|            Yes|             Yes|     Yes|    Yes|Positive|
| 55|  Male|     Yes|       Yes|                No|     Yes|       Yes|            No|            Yes|    Yes|          No|            Yes|             No|             Yes|     Yes|    Yes|Positive|
| 57|  Male|     Yes|       Yes|                No|     Yes|       Yes|           Yes|             No|     No|          No|            Yes|            Yes|              No|      No|     No|Positive|
| 66|  Male|     Yes|       Yes|               Yes|     Yes|        No|            No|            Yes|    Yes|         Yes|             No|            Yes|             Yes|      No|     No|Positive|
| 67|  Male|     Yes|       Yes|                No|     Yes|       Yes|           Yes|             No|    Yes|         Yes|             No|            Yes|             Yes|      No|    Yes|Positive|
| 70|  Male|      No|       Yes|               Yes|     Yes|       Yes|            No|            Yes|    Yes|         Yes|             No|             No|              No|     Yes|     No|Positive|
+---+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
only showing top 10 rows


df.describe().show
+-------+------------------+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
|summary|               Age|Gender|Polyuria|Polydipsia|sudden weight loss|weakness|Polyphagia|Genital thrush|visual blurring|Itching|Irritability|delayed healing|partial paresis|muscle stiffness|Alopecia|Obesity|   class|
+-------+------------------+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+
|  count|               520|   520|     520|       520|               520|     520|       520|           520|            520|    520|         520|            520|            520|             520|     520|    520|     520|
|   mean| 48.02884615384615|  null|    null|      null|              null|    null|      null|          null|           null|   null|        null|           null|           null|            null|    null|   null|    null|
| stddev|12.151465995249454|  null|    null|      null|              null|    null|      null|          null|           null|   null|        null|           null|           null|            null|    null|   null|    null|
|    min|                16|Female|      No|        No|                No|      No|        No|            No|             No|     No|          No|             No|             No|              No|      No|     No|Negative|
|    max|                90|  Male|     Yes|       Yes|               Yes|     Yes|       Yes|           Yes|            Yes|    Yes|         Yes|            Yes|            Yes|             Yes|     Yes|    Yes|Positive|
+-------+------------------+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+--------+

df.groupBy("label").count.show
+--------+-----+
|class   |count|
+--------+-----+
|Negative|  200|
|Positive|  320|
+--------+-----+

---- Feature extraction & Data Munging --------------

val df1 = df.na.replace(Array("Polyuria","Polydipsia","sudden weight loss","weakness","Polyphagia","Genital thrush","visual blurring","Itching","Irritability","delayed healing","partial paresis","muscle stiffness","Alopecia","Obesity"),Map("No" -> "0.0", "Yes" -> "1.0")).
      na.replace(Array("class"),Map("Negative" -> "0.0", "Positive" -> "1.0")).
      na.replace(Array("Gender"),Map("Female" -> "0.0", "Male" -> "1.0")).
      withColumn("label", 'class)
	  
import org.apache.spark.sql.functions._
import org.apache.spark.sql.types._

val types = df1.dtypes
types: Array[(String, String)] = Array((Age,IntegerType), (Gender,StringType), (Polyuria,StringType), (Polydipsia,StringType), (sudden weight loss,StringType), (weakness,StringType), (Polyphagia,StringType), (Genital thrush,StringType), (visual blurring,StringType), (Itching,StringType), (Irritability,StringType), (delayed healing,StringType), (partial paresis,StringType), (muscle stiffness,StringType), (Alopecia,StringType), (Obesity,StringType), (class,StringType), (label,StringType))

df1.select(types.map{ case(c,t) => col(c).cast(DoubleType)}: _*)
res13: org.apache.spark.sql.DataFrame = [Age: double, Gender: double ... 16 more fields]

val df2 = df1.select(types.map{ case(c,t) => col(c).cast(DoubleType)}: _*)
df2: org.apache.spark.sql.DataFrame = [Age: double, Gender: double ... 16 more fields]

df2.printSchema
root
 |-- Age: double (nullable = true)
 |-- Gender: double (nullable = true)
 |-- Polyuria: double (nullable = true)
 |-- Polydipsia: double (nullable = true)
 |-- sudden weight loss: double (nullable = true)
 |-- weakness: double (nullable = true)
 |-- Polyphagia: double (nullable = true)
 |-- Genital thrush: double (nullable = true)
 |-- visual blurring: double (nullable = true)
 |-- Itching: double (nullable = true)
 |-- Irritability: double (nullable = true)
 |-- delayed healing: double (nullable = true)
 |-- partial paresis: double (nullable = true)
 |-- muscle stiffness: double (nullable = true)
 |-- Alopecia: double (nullable = true)
 |-- Obesity: double (nullable = true)
 |-- class: double (nullable = true)
 |-- label: double (nullable = true)


import org.apache.spark.ml.feature.{VectorAssembler}

val va = new VectorAssembler().setOutputCol("features").setInputCols(Array("Age","Gender","Polyuria","Polydipsia","sudden weight loss","weakness","Polyphagia","Genital thrush","visual blurring","Itching","Irritability","delayed healing","partial paresis","muscle stiffness","Alopecia","Obesity"))

val df3 = va.transform(df2)

df3.printSchema
root
 |-- Age: double (nullable = true)
 |-- Gender: double (nullable = true)
 |-- Polyuria: double (nullable = true)
 |-- Polydipsia: double (nullable = true)
 |-- sudden weight loss: double (nullable = true)
 |-- weakness: double (nullable = true)
 |-- Polyphagia: double (nullable = true)
 |-- Genital thrush: double (nullable = true)
 |-- visual blurring: double (nullable = true)
 |-- Itching: double (nullable = true)
 |-- Irritability: double (nullable = true)
 |-- delayed healing: double (nullable = true)
 |-- partial paresis: double (nullable = true)
 |-- muscle stiffness: double (nullable = true)
 |-- Alopecia: double (nullable = true)
 |-- Obesity: double (nullable = true)
 |-- class: double (nullable = true)
 |-- label: double (nullable = true)
 |-- features: vector (nullable = true)
 
df3.show(10)
+----+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+-----+-----+--------------------+
| Age|Gender|Polyuria|Polydipsia|sudden weight loss|weakness|Polyphagia|Genital thrush|visual blurring|Itching|Irritability|delayed healing|partial paresis|muscle stiffness|Alopecia|Obesity|class|label|            features|
+----+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+-----+-----+--------------------+
|40.0|   1.0|     0.0|       1.0|               0.0|     1.0|       0.0|           0.0|            0.0|    1.0|         0.0|            1.0|            0.0|             1.0|     1.0|    1.0|  1.0|  1.0|(16,[0,1,3,5,9,11...|
|58.0|   1.0|     0.0|       0.0|               0.0|     1.0|       0.0|           0.0|            1.0|    0.0|         0.0|            0.0|            1.0|             0.0|     1.0|    0.0|  1.0|  1.0|(16,[0,1,5,8,12,1...|
|41.0|   1.0|     1.0|       0.0|               0.0|     1.0|       1.0|           0.0|            0.0|    1.0|         0.0|            1.0|            0.0|             1.0|     1.0|    0.0|  1.0|  1.0|(16,[0,1,2,5,6,9,...|
|45.0|   1.0|     0.0|       0.0|               1.0|     1.0|       1.0|           1.0|            0.0|    1.0|         0.0|            1.0|            0.0|             0.0|     0.0|    0.0|  1.0|  1.0|(16,[0,1,4,5,6,7,...|
|60.0|   1.0|     1.0|       1.0|               1.0|     1.0|       1.0|           0.0|            1.0|    1.0|         1.0|            1.0|            1.0|             1.0|     1.0|    1.0|  1.0|  1.0|[60.0,1.0,1.0,1.0...|
|55.0|   1.0|     1.0|       1.0|               0.0|     1.0|       1.0|           0.0|            1.0|    1.0|         0.0|            1.0|            0.0|             1.0|     1.0|    1.0|  1.0|  1.0|[55.0,1.0,1.0,1.0...|
|57.0|   1.0|     1.0|       1.0|               0.0|     1.0|       1.0|           1.0|            0.0|    0.0|         0.0|            1.0|            1.0|             0.0|     0.0|    0.0|  1.0|  1.0|(16,[0,1,2,3,5,6,...|
|66.0|   1.0|     1.0|       1.0|               1.0|     1.0|       0.0|           0.0|            1.0|    1.0|         1.0|            0.0|            1.0|             1.0|     0.0|    0.0|  1.0|  1.0|[66.0,1.0,1.0,1.0...|
|67.0|   1.0|     1.0|       1.0|               0.0|     1.0|       1.0|           1.0|            0.0|    1.0|         1.0|            0.0|            1.0|             1.0|     0.0|    1.0|  1.0|  1.0|[67.0,1.0,1.0,1.0...|
|70.0|   1.0|     0.0|       1.0|               1.0|     1.0|       1.0|           0.0|            1.0|    1.0|         1.0|            0.0|            0.0|             0.0|     1.0|    0.0|  1.0|  1.0|[70.0,1.0,0.0,1.0...|
+----+------+--------+----------+------------------+--------+----------+--------------+---------------+-------+------------+---------------+---------------+----------------+--------+-------+-----+-----+--------------------+
only showing top 10 rows

// calculate pearson correlation to check multicolinearity

import org.apache.spark.ml.stat.Correlation
import org.apache.spark.ml.linalg.Matrix
import org.apache.spark.sql.Row

val corr = Correlation.corr(df3, "features", "pearson").head match {
   case Row(coeff: Matrix) => coeff
}
corr: org.apache.spark.ml.linalg.Matrix =
1.0                  0.06287207235698071    ... (16 total)
0.06287207235698071  1.0                    ...
0.19978075334739312  -0.26889367319563273   ...
0.13738159841543351  -0.3122617085919867    ...
0.0648083523423491   -0.28184010354962535   ...
0.2245955814796513   -0.12448966582906787   ...
0.3155768635050646   -0.21996805389192126   ...
0.09651861731004621  0.20896096685895094    ...
0.4027293484862436   -0.2080922874470089    ...
0.2965588901960364   -0.05249649746784866   ...
0.2016245924307449   -0.013735368023980257  ...
0.25750100691357225  -0.10197761974642187   ...
0.23274234710316322  -0.332288336507089     ...
0.30770276984767947  -0.09054187969287905   ...
0.3216913282501367   0.3278713061899102     ...
0.14045833557951048  -0....


corr.toDense.rowIter.foreach( x => println(x.toString))
[1.0,0.06287207235698071,0.19978075334739312,0.13738159841543351,0.0648083523423491,0.2245955814796513,0.3155768635050646,0.09651861731004621,0.4027293484862436,0.2965588901960364,0.2016245924307449,0.25750100691357225,0.23274234710316322,0.30770276984767947,0.3216913282501367,0.14045833557951048]
[0.06287207235698071,1.0,-0.26889367319563273,-0.3122617085919867,-0.28184010354962535,-0.12448966582906787,-0.21996805389192126,0.20896096685895094,-0.2080922874470089,-0.05249649746784866,-0.013735368023980257,-0.10197761974642187,-0.332288336507089,-0.09054187969287905,0.3278713061899102,-0.005395518440446011]
[0.19978075334739312,-0.26889367319563273,1.0,0.5986091009356637,0.44720697373828777,0.26300045377411535,0.3738732028443725,0.0872726538127282,0.23509455472317994,0.08828905311584923,0.23774047819594968,0.14987277798161197,0.4416635777669904,0.15293771339390594,-0.14419180322269073,0.12656704690594667]
[0.13738159841543351,-0.3122617085919867,0.5986091009356637,1.0,0.40596522400000984,0.3324532870469171,0.3168389848584052,0.028081089626713192,0.33124971960939725,0.12871569673730976,0.20344612610137403,0.11569078413386034,0.44224917443009143,0.18072325350875654,-0.31096368769073357,0.09869115992947475]
[0.0648083523423491,-0.28184010354962535,0.44720697373828777,0.40596522400000984,1.0,0.28288406988787157,0.24351084356996902,0.08985775964572092,0.06875424258761631,-0.0045164730502805445,0.14034000487131745,0.08813977396530709,0.2640135223855987,0.10975635791165536,-0.20272700128624885,0.1692938821257621]
[0.2245955814796513,-0.12448966582906787,0.26300045377411535,0.3324532870469171,0.28288406988787157,1.0,0.18026567539330268,0.027779977780518036,0.30104275617898235,0.3094402158827378,0.1466975716692494,0.3355068869885712,0.27298167281982355,0.2631635450965521,0.09049042676196882,0.04566489757618143]
[0.3155768635050646,-0.21996805389192126,0.3738732028443725,0.3168389848584052,0.24351084356996902,0.18026567539330268,1.0,-0.06371246122391057,0.2935452944687018,0.1443903935426158,0.23946630559840607,0.26397979300279173,0.37356943861159014,0.32003097313985396,-0.0534977852881006,0.02978497473223151]
[0.09651861731004621,0.20896096685895094,0.0872726538127282,0.028081089626713192,0.08985775964572092,0.027779977780518036,-0.06371246122391057,1.0,-0.14840820141140837,0.12533626111414825,0.1605507296603978,0.13611128438322223,-0.19561236370623775,-0.10018760142695254,0.2048465440614089,0.05382765254401725]
[0.4027293484862436,-0.2080922874470089,0.23509455472317994,0.33124971960939725,0.06875424258761631,0.30104275617898235,0.2935452944687018,-0.14840820141140837,1.0,0.2911911803081596,0.0770950087137266,0.17776658214712734,0.3641557315125259,0.41236852872440044,0.014603569769741418,0.10900454480956458]
[0.2965588901960364,-0.05249649746784866,0.08828905311584923,0.12871569673730976,-0.0045164730502805445,0.3094402158827378,0.1443903935426158,0.12533626111414825,0.2911911803081596,1.0,0.11400561592791243,0.45331644681235705,0.11666861672036322,0.2155749097968032,0.26650573189771387,0.0018944019508870212]
[0.2016245924307449,-0.013735368023980257,0.23774047819594968,0.20344612610137403,0.14034000487131745,0.1466975716692494,0.23946630559840607,0.1605507296603978,0.0770950087137266,0.11400561592791243,1.0,0.12687656739393444,0.15157105828443543,0.20163700371364948,0.04370775847556634,0.127800591682075]
[0.25750100691357225,-0.10197761974642187,0.14987277798161197,0.11569078413386034,0.08813977396530709,0.3355068869885712,0.26397979300279173,0.13611128438322223,0.17776658214712734,0.45331644681235705,0.12687656739393444,1.0,0.18738162025155242,0.25007828452135983,0.290179360532781,-0.06633896477711516]
[0.23274234710316322,-0.332288336507089,0.4416635777669904,0.44224917443009143,0.2640135223855987,0.27298167281982355,0.37356943861159014,-0.19561236370623775,0.3641557315125259,0.11666861672036322,0.15157105828443543,0.18738162025155242,1.0,0.23263362637074655,-0.22157579764527896,-0.00940132192884891]
[0.30770276984767947,-0.09054187969287905,0.15293771339390594,0.18072325350875654,0.10975635791165536,0.2631635450965521,0.32003097313985396,-0.10018760142695254,0.41236852872440044,0.2155749097968032,0.20163700371364948,0.25007828452135983,0.23263362637074655,1.0,0.040758225945098675,0.15891043154093204]
[0.3216913282501367,0.3278713061899102,-0.14419180322269073,-0.31096368769073357,-0.20272700128624885,0.09049042676196882,-0.0534977852881006,0.2048465440614089,0.014603569769741418,0.26650573189771387,0.04370775847556634,0.290179360532781,-0.22157579764527896,0.040758225945098675,1.0,0.02922912000474369]
[0.14045833557951048,-0.005395518440446011,0.12656704690594667,0.09869115992947475,0.1692938821257621,0.04566489757618143,0.02978497473223151,0.05382765254401725,0.10900454480956458,0.0018944019508870212,0.127800591682075,-0.06633896477711516,-0.00940132192884891,0.15891043154093204,0.02922912000474369,1.0]

corr.toDense.rowIter.foreach( x => {
     |   val size = x.size
     |   for ( i <- Range(0,size)) {
     |     val elem = x(i)
     |     print(f"$elem%.3f\t")
     |   }
     |   println
     | })
// "Age","Gender","Polyuria","Polydipsia","sudden weight loss","weakness","Polyphagia","Genital thrush","visual blurring","Itching","Irritability","delayed healing","partial paresis","muscle stiffness","Alopecia","Obesity"
1.000   0.063   0.200   0.137   0.065   0.225   0.316   0.097   0.403   0.297  0.202    0.258   0.233   0.308   0.322   0.140
0.063   1.000   -0.269  -0.312  -0.282  -0.124  -0.220  0.209   -0.208  -0.052 -0.014   -0.102  -0.332  -0.091  0.328   -0.005
0.200   -0.269  1.000   0.599   0.447   0.263   0.374   0.087   0.235   0.088  0.238    0.150   0.442   0.153   -0.144  0.127
0.137   -0.312  0.599   1.000   0.406   0.332   0.317   0.028   0.331   0.129  0.203    0.116   0.442   0.181   -0.311  0.099
0.065   -0.282  0.447   0.406   1.000   0.283   0.244   0.090   0.069   -0.005 0.140    0.088   0.264   0.110   -0.203  0.169
0.225   -0.124  0.263   0.332   0.283   1.000   0.180   0.028   0.301   0.309  0.147    0.336   0.273   0.263   0.090   0.046
0.316   -0.220  0.374   0.317   0.244   0.180   1.000   -0.064  0.294   0.144  0.239    0.264   0.374   0.320   -0.053  0.030
0.097   0.209   0.087   0.028   0.090   0.028   -0.064  1.000   -0.148  0.125  0.161    0.136   -0.196  -0.100  0.205   0.054
0.403   -0.208  0.235   0.331   0.069   0.301   0.294   -0.148  1.000   0.291  0.077    0.178   0.364   0.412   0.015   0.109
0.297   -0.052  0.088   0.129   -0.005  0.309   0.144   0.125   0.291   1.000  0.114    0.453   0.117   0.216   0.267   0.002
0.202   -0.014  0.238   0.203   0.140   0.147   0.239   0.161   0.077   0.114  1.000    0.127   0.152   0.202   0.044   0.128
0.258   -0.102  0.150   0.116   0.088   0.336   0.264   0.136   0.178   0.453  0.127    1.000   0.187   0.250   0.290   -0.066
0.233   -0.332  0.442   0.442   0.264   0.273   0.374   -0.196  0.364   0.117  0.152    0.187   1.000   0.233   -0.222  -0.009
0.308   -0.091  0.153   0.181   0.110   0.263   0.320   -0.100  0.412   0.216  0.202    0.250   0.233   1.000   0.041   0.159
0.322   0.328   -0.144  -0.311  -0.203  0.090   -0.053  0.205   0.015   0.267  0.044    0.290   -0.222  0.041   1.000   0.029
0.140   -0.005  0.127   0.099   0.169   0.046   0.030   0.054   0.109   0.002  0.128    -0.066  -0.009  0.159   0.029   1.000

// there is NO evidence of multicolinearity


// ----- building the logistic regression model

import org.apache.spark.ml.feature.StandardScaler
val stdScaler = new StandardScaler().
setWithStd(true).
setWithMean(true).
setInputCol("features").
setOutputCol("scaledFeatures")

import org.apache.spark.ml.classification.LogisticRegression
val lr = new LogisticRegression
lr.setRegParam(0.01).setMaxIter(500).setFitIntercept(true).setFeaturesCol("scaledFeatures")

import org.apache.spark.ml.Pipeline
val pipeline = new Pipeline().setStages(Array(va,stdScaler,lr))

val Array(trainingData, testData) = df2.randomSplit(Array(0.7,0.3),11L)

val model = pipeline.fit(trainingData)

-- collecting metric performance

val pred = model.transform(testData)

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator
val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res5: Double = 0.9717638430509716

bceval.setMetricName("areaUnderPR").evaluate(pred)
res6: Double = 0.9879640674546408


val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res8: org.apache.spark.mllib.linalg.Matrix =
52.0  6.0
2.0   95.0

-- collecting feature importance

import org.apache.spark.ml.classification.LogisticRegressionModel

val lrmodel = model.stages.last.asInstanceOf[LogisticRegressionModel]

val featureImp = va.getInputCols.zip(lrmodel.coefficients.toArray)

val columns = Array("feature", "Importance")
val featureImpDF = spark.createDataFrame(featureImp).toDF(columns: _*)

featureImpDF.orderBy($"Importance".desc).show()
+------------------+--------------------+
|           feature|          Importance|
+------------------+--------------------+
|        Polydipsia|  1.3561435255904153|
|          Polyuria|   1.266929438867989|
|      Irritability|   0.759354527397228|
|    Genital thrush|   0.518836404444447|
|   partial paresis|  0.4567697886741777|
|sudden weight loss| 0.34632330032266495|
|        Polyphagia|  0.2452477289034843|
|   visual blurring|  0.2278058935699796|
|          weakness| 0.17857229822254198|
|           Obesity|-0.09231938186022055|
|               Age|-0.09728127826946179|
|          Alopecia|-0.14972494229268168|
|  muscle stiffness|-0.18166280808138677|
|   delayed healing| -0.3932361656761581|
|           Itching|  -0.516832627982378|
|            Gender| -1.2344954156053858|
+------------------+--------------------+


// ----- logistic regression model hyperparameter tunning

import org.apache.spark.ml.tuning.{ParamGridBuilder, CrossValidator}

val paramGrid = new ParamGridBuilder().
addGrid(lr.regParam, Array(1, 0.1, 0.01)).
addGrid(lr.fitIntercept).
addGrid(lr.maxIter, Array(100,300,500)).build()

import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator

val cv = new CrossValidator().
setEstimator(pipeline).
setEvaluator(new BinaryClassificationEvaluator).
setEstimatorParamMaps(paramGrid).
setNumFolds(3)

val cvmodel = cv.fit(trainingData)

-- CV hyperparameter evaluation

cvmodel.getEstimatorParamMaps.zip(cvmodel.avgMetrics)
res10: Array[(org.apache.spark.ml.param.ParamMap, Double)] =
Array(({
        logreg_f6ac182ac992-fitIntercept: true,
        logreg_f6ac182ac992-maxIter: 100,
        logreg_f6ac182ac992-regParam: 1.0
},0.9564730221285483), ({
        logreg_f6ac182ac992-fitIntercept: false,
        logreg_f6ac182ac992-maxIter: 100,
        logreg_f6ac182ac992-regParam: 1.0
},0.9564910458176685), ({
        logreg_f6ac182ac992-fitIntercept: true,
        logreg_f6ac182ac992-maxIter: 300,
        logreg_f6ac182ac992-regParam: 1.0
},0.9564730221285483), ({
        logreg_f6ac182ac992-fitIntercept: false,
        logreg_f6ac182ac992-maxIter: 300,
        logreg_f6ac182ac992-regParam: 1.0
},0.9564910458176685), ({
        logreg_f6ac182ac992-fitIntercept: true,
        logreg_f6ac182ac992-maxIter: 500,
        logreg_f6ac182ac992-regParam: 1.0
},0.9564730221285483), ({
        logreg_f6ac182ac992-fitIntercept: false...
		

-- extract best LR model 

import org.apache.spark.ml.PipelineModel
val bestmodel = cvmodel.bestModel.asInstanceOf[PipelineModel]

import org.apache.spark.ml.classification.LogisticRegressionModel
val lrmodel = bestmodel.stages.last.asInstanceOf[LogisticRegressionModel]

lrmodel.getRegParam
res3: Double = 0.01

lrmodel.getMaxIter
res4: Int = 100

lrmodel.getThreshold
res5: Double = 0.5

lrmodel.getFitIntercept
res6: Boolean = true

lrmodel.getStandardization
res7: Boolean = true

val pred = bestmodel.transform(testData)

-- collecting metric performance

val bceval = new BinaryClassificationEvaluator()

bceval.setMetricName("areaUnderROC").evaluate(pred)
res11: Double = 0.9717638430509716

bceval.setMetricName("areaUnderPR").evaluate(pred)
res12: Double = 0.9879640674546408


val validPredicts = pred.select("label","prediction").rdd.map( row => (row.getDouble(0),row.getDouble(1)) )

import org.apache.spark.mllib.evaluation.MulticlassMetrics
val metrics = new MulticlassMetrics(validPredicts)

metrics.confusionMatrix
res14: org.apache.spark.mllib.linalg.Matrix =
52.0  6.0
2.0   95.0

-- collecting feature importance

val featureImp = va.getInputCols.zip(lrmodel.coefficients.toArray)

val columns = Array("feature", "Importance")
val featureImpDF = spark.createDataFrame(featureImp).toDF(columns: _*)

featureImpDF.orderBy($"Importance".desc).show()
+------------------+--------------------+
|           feature|          Importance|
+------------------+--------------------+
|        Polydipsia|  1.3561435255904153|
|          Polyuria|   1.266929438867989|
|      Irritability|   0.759354527397228|
|    Genital thrush|   0.518836404444447|
|   partial paresis|  0.4567697886741777|
|sudden weight loss| 0.34632330032266495|
|        Polyphagia|  0.2452477289034843|
|   visual blurring|  0.2278058935699796|
|          weakness| 0.17857229822254198|
|           Obesity|-0.09231938186022055|
|               Age|-0.09728127826946179|
|          Alopecia|-0.14972494229268168|
|  muscle stiffness|-0.18166280808138677|
|   delayed healing| -0.3932361656761581|
|           Itching|  -0.516832627982378|
|            Gender| -1.2344954156053858|
+------------------+--------------------+
